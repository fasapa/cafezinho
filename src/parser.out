Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> DeclFuncVar DeclProg
Rule 2     DeclFuncVar -> Tipo ID DeclVar ; DeclFuncVar
Rule 3     DeclFuncVar -> Tipo ID [ INTCONST ] DeclVar ; DeclFuncVar
Rule 4     DeclFuncVar -> Tipo ID DeclFunc DeclFuncVar
Rule 5     DeclFuncVar -> empty
Rule 6     DeclVar -> , ID DeclVar
Rule 7     DeclVar -> , ID [ INTCONST ] DeclVar
Rule 8     DeclVar -> empty
Rule 9     DeclProg -> PROGRAMA Bloco
Rule 10    DeclFunc -> ( ListaParametros ) Bloco
Rule 11    ListaParametros -> empty
Rule 12    ListaParametros -> ListaParametrosCont
Rule 13    ListaParametrosCont -> Tipo ID
Rule 14    ListaParametrosCont -> Tipo ID [ ]
Rule 15    ListaParametrosCont -> Tipo ID , ListaParametrosCont
Rule 16    ListaParametrosCont -> Tipo ID [ ] , ListaParametrosCont
Rule 17    Bloco -> { ListaDeclVar ListaComando }
Rule 18    Bloco -> { ListaDeclVar }
Rule 19    ListaDeclVar -> empty
Rule 20    ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar
Rule 21    ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar
Rule 22    Tipo -> INT
Rule 23    Tipo -> CAR
Rule 24    ListaComando -> Comando
Rule 25    ListaComando -> Comando ListaComando
Rule 26    Comando -> ;
Rule 27    Comando -> RETORNE Expr ;
Rule 28    Comando -> LEIA LValueExpr ;
Rule 29    Comando -> ESCREVA Expr ;
Rule 30    Comando -> ESCREVA STRING ;
Rule 31    Comando -> NOVALINHA ;
Rule 32    Comando -> SE ( Expr ) ENTAO Comando
Rule 33    Comando -> SE ( Expr ) ENTAO Comando SENAO Comando
Rule 34    Comando -> Expr ;
Rule 35    Comando -> ENQUANTO ( Expr ) EXECUTE Comando
Rule 36    Comando -> Bloco
Rule 37    Expr -> AssignExpr
Rule 38    AssignExpr -> CondExpr
Rule 39    AssignExpr -> LValueExpr = AssignExpr
Rule 40    CondExpr -> OrExpr
Rule 41    CondExpr -> OrExpr ? Expr : CondExpr
Rule 42    OrExpr -> OrExpr OU AndExpr
Rule 43    OrExpr -> AndExpr
Rule 44    AndExpr -> AndExpr E EqExpr
Rule 45    AndExpr -> EqExpr
Rule 46    EqExpr -> EqExpr EQUAL DesigExpr
Rule 47    EqExpr -> DesigExpr
Rule 48    EqExpr -> EqExpr DIFF DesigExpr
Rule 49    DesigExpr -> DesigExpr < AddExpr
Rule 50    DesigExpr -> DesigExpr > AddExpr
Rule 51    DesigExpr -> AddExpr
Rule 52    DesigExpr -> DesigExpr GEQ AddExpr
Rule 53    DesigExpr -> DesigExpr LEQ AddExpr
Rule 54    AddExpr -> AddExpr + MulExpr
Rule 55    AddExpr -> AddExpr - MulExpr
Rule 56    AddExpr -> MulExpr
Rule 57    MulExpr -> MulExpr * UnExpr
Rule 58    MulExpr -> MulExpr / UnExpr
Rule 59    MulExpr -> MulExpr % UnExpr
Rule 60    MulExpr -> UnExpr
Rule 61    UnExpr -> - PrimExpr
Rule 62    UnExpr -> ! PrimExpr
Rule 63    UnExpr -> PrimExpr
Rule 64    LValueExpr -> ID [ Expr ]
Rule 65    LValueExpr -> ID
Rule 66    PrimExpr -> ID ( )
Rule 67    PrimExpr -> ID ( ListExpr )
Rule 68    PrimExpr -> ID [ Expr ]
Rule 69    PrimExpr -> ( Expr )
Rule 70    PrimExpr -> CARCONST
Rule 71    PrimExpr -> INTCONST
Rule 72    PrimExpr -> ID
Rule 73    ListExpr -> AssignExpr
Rule 74    ListExpr -> ListExpr , AssignExpr
Rule 75    empty -> <empty>

Terminals, with rules where they appear

!                    : 62
%                    : 59
(                    : 10 32 33 35 66 67 69
)                    : 10 32 33 35 66 67 69
*                    : 57
+                    : 54
,                    : 6 7 15 16 74
-                    : 55 61
/                    : 58
:                    : 41
;                    : 2 3 20 21 26 27 28 29 30 31 34
<                    : 49
=                    : 39
>                    : 50
?                    : 41
CAR                  : 23
CARCONST             : 70
DIFF                 : 48
E                    : 44
ENQUANTO             : 35
ENTAO                : 32 33
EQUAL                : 46
ESCREVA              : 29 30
EXECUTE              : 35
GEQ                  : 52
ID                   : 2 3 4 6 7 13 14 15 16 20 21 64 65 66 67 68 72
INT                  : 22
INTCONST             : 3 7 21 71
LEIA                 : 28
LEQ                  : 53
NOVALINHA            : 31
OU                   : 42
PROGRAMA             : 9
RETORNE              : 27
SE                   : 32 33
SENAO                : 33
STRING               : 30
[                    : 3 7 14 16 21 64 68
]                    : 3 7 14 16 21 64 68
error                : 
{                    : 17 18
}                    : 17 18

Nonterminals, with rules where they appear

AddExpr              : 49 50 51 52 53 54 55
AndExpr              : 42 43 44
AssignExpr           : 37 39 73 74
Bloco                : 9 10 36
Comando              : 24 25 32 33 33 35
CondExpr             : 38 41
DeclFunc             : 4
DeclFuncVar          : 1 2 3 4
DeclProg             : 1
DeclVar              : 2 3 6 7 20 21
DesigExpr            : 46 47 48 49 50 52 53
EqExpr               : 44 45 46 48
Expr                 : 27 29 32 33 34 35 41 64 68 69
LValueExpr           : 28 39
ListExpr             : 67 74
ListaComando         : 17 25
ListaDeclVar         : 17 18 20 21
ListaParametros      : 10
ListaParametrosCont  : 12 15 16
MulExpr              : 54 55 56 57 58 59
OrExpr               : 40 41 42
PrimExpr             : 61 62 63
Programa             : 0
Tipo                 : 2 3 4 13 14 15 16 20 21
UnExpr               : 57 58 59 60
empty                : 5 8 11 19

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . DeclFuncVar DeclProg
    (2) DeclFuncVar -> . Tipo ID DeclVar ; DeclFuncVar
    (3) DeclFuncVar -> . Tipo ID [ INTCONST ] DeclVar ; DeclFuncVar
    (4) DeclFuncVar -> . Tipo ID DeclFunc DeclFuncVar
    (5) DeclFuncVar -> . empty
    (22) Tipo -> . INT
    (23) Tipo -> . CAR
    (75) empty -> .

    INT             shift and go to state 5
    CAR             shift and go to state 6
    PROGRAMA        reduce using rule 75 (empty -> .)

    Programa                       shift and go to state 1
    DeclFuncVar                    shift and go to state 2
    Tipo                           shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> DeclFuncVar . DeclProg
    (9) DeclProg -> . PROGRAMA Bloco

    PROGRAMA        shift and go to state 8

    DeclProg                       shift and go to state 7

state 3

    (2) DeclFuncVar -> Tipo . ID DeclVar ; DeclFuncVar
    (3) DeclFuncVar -> Tipo . ID [ INTCONST ] DeclVar ; DeclFuncVar
    (4) DeclFuncVar -> Tipo . ID DeclFunc DeclFuncVar

    ID              shift and go to state 9


state 4

    (5) DeclFuncVar -> empty .

    PROGRAMA        reduce using rule 5 (DeclFuncVar -> empty .)


state 5

    (22) Tipo -> INT .

    ID              reduce using rule 22 (Tipo -> INT .)


state 6

    (23) Tipo -> CAR .

    ID              reduce using rule 23 (Tipo -> CAR .)


state 7

    (1) Programa -> DeclFuncVar DeclProg .

    $end            reduce using rule 1 (Programa -> DeclFuncVar DeclProg .)


state 8

    (9) DeclProg -> PROGRAMA . Bloco
    (17) Bloco -> . { ListaDeclVar ListaComando }
    (18) Bloco -> . { ListaDeclVar }

    {               shift and go to state 11

    Bloco                          shift and go to state 10

state 9

    (2) DeclFuncVar -> Tipo ID . DeclVar ; DeclFuncVar
    (3) DeclFuncVar -> Tipo ID . [ INTCONST ] DeclVar ; DeclFuncVar
    (4) DeclFuncVar -> Tipo ID . DeclFunc DeclFuncVar
    (6) DeclVar -> . , ID DeclVar
    (7) DeclVar -> . , ID [ INTCONST ] DeclVar
    (8) DeclVar -> . empty
    (10) DeclFunc -> . ( ListaParametros ) Bloco
    (75) empty -> .

    [               shift and go to state 13
    ,               shift and go to state 15
    (               shift and go to state 17
    ;               reduce using rule 75 (empty -> .)

    DeclVar                        shift and go to state 12
    DeclFunc                       shift and go to state 14
    empty                          shift and go to state 16

state 10

    (9) DeclProg -> PROGRAMA Bloco .

    $end            reduce using rule 9 (DeclProg -> PROGRAMA Bloco .)


state 11

    (17) Bloco -> { . ListaDeclVar ListaComando }
    (18) Bloco -> { . ListaDeclVar }
    (19) ListaDeclVar -> . empty
    (20) ListaDeclVar -> . Tipo ID DeclVar ; ListaDeclVar
    (21) ListaDeclVar -> . Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar
    (75) empty -> .
    (22) Tipo -> . INT
    (23) Tipo -> . CAR

    }               reduce using rule 75 (empty -> .)
    ;               reduce using rule 75 (empty -> .)
    RETORNE         reduce using rule 75 (empty -> .)
    LEIA            reduce using rule 75 (empty -> .)
    ESCREVA         reduce using rule 75 (empty -> .)
    NOVALINHA       reduce using rule 75 (empty -> .)
    SE              reduce using rule 75 (empty -> .)
    ENQUANTO        reduce using rule 75 (empty -> .)
    {               reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    -               reduce using rule 75 (empty -> .)
    !               reduce using rule 75 (empty -> .)
    (               reduce using rule 75 (empty -> .)
    CARCONST        reduce using rule 75 (empty -> .)
    INTCONST        reduce using rule 75 (empty -> .)
    INT             shift and go to state 5
    CAR             shift and go to state 6

    ListaDeclVar                   shift and go to state 18
    empty                          shift and go to state 19
    Tipo                           shift and go to state 20

state 12

    (2) DeclFuncVar -> Tipo ID DeclVar . ; DeclFuncVar

    ;               shift and go to state 21


state 13

    (3) DeclFuncVar -> Tipo ID [ . INTCONST ] DeclVar ; DeclFuncVar

    INTCONST        shift and go to state 22


state 14

    (4) DeclFuncVar -> Tipo ID DeclFunc . DeclFuncVar
    (2) DeclFuncVar -> . Tipo ID DeclVar ; DeclFuncVar
    (3) DeclFuncVar -> . Tipo ID [ INTCONST ] DeclVar ; DeclFuncVar
    (4) DeclFuncVar -> . Tipo ID DeclFunc DeclFuncVar
    (5) DeclFuncVar -> . empty
    (22) Tipo -> . INT
    (23) Tipo -> . CAR
    (75) empty -> .

    INT             shift and go to state 5
    CAR             shift and go to state 6
    PROGRAMA        reduce using rule 75 (empty -> .)

    Tipo                           shift and go to state 3
    DeclFuncVar                    shift and go to state 23
    empty                          shift and go to state 4

state 15

    (6) DeclVar -> , . ID DeclVar
    (7) DeclVar -> , . ID [ INTCONST ] DeclVar

    ID              shift and go to state 24


state 16

    (8) DeclVar -> empty .

    ;               reduce using rule 8 (DeclVar -> empty .)


state 17

    (10) DeclFunc -> ( . ListaParametros ) Bloco
    (11) ListaParametros -> . empty
    (12) ListaParametros -> . ListaParametrosCont
    (75) empty -> .
    (13) ListaParametrosCont -> . Tipo ID
    (14) ListaParametrosCont -> . Tipo ID [ ]
    (15) ListaParametrosCont -> . Tipo ID , ListaParametrosCont
    (16) ListaParametrosCont -> . Tipo ID [ ] , ListaParametrosCont
    (22) Tipo -> . INT
    (23) Tipo -> . CAR

    )               reduce using rule 75 (empty -> .)
    INT             shift and go to state 5
    CAR             shift and go to state 6

    ListaParametros                shift and go to state 25
    empty                          shift and go to state 26
    ListaParametrosCont            shift and go to state 27
    Tipo                           shift and go to state 28

state 18

    (17) Bloco -> { ListaDeclVar . ListaComando }
    (18) Bloco -> { ListaDeclVar . }
    (24) ListaComando -> . Comando
    (25) ListaComando -> . Comando ListaComando
    (26) Comando -> . ;
    (27) Comando -> . RETORNE Expr ;
    (28) Comando -> . LEIA LValueExpr ;
    (29) Comando -> . ESCREVA Expr ;
    (30) Comando -> . ESCREVA STRING ;
    (31) Comando -> . NOVALINHA ;
    (32) Comando -> . SE ( Expr ) ENTAO Comando
    (33) Comando -> . SE ( Expr ) ENTAO Comando SENAO Comando
    (34) Comando -> . Expr ;
    (35) Comando -> . ENQUANTO ( Expr ) EXECUTE Comando
    (36) Comando -> . Bloco
    (37) Expr -> . AssignExpr
    (17) Bloco -> . { ListaDeclVar ListaComando }
    (18) Bloco -> . { ListaDeclVar }
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    }               shift and go to state 30
    ;               shift and go to state 32
    RETORNE         shift and go to state 33
    LEIA            shift and go to state 35
    ESCREVA         shift and go to state 37
    NOVALINHA       shift and go to state 38
    SE              shift and go to state 39
    ENQUANTO        shift and go to state 41
    {               shift and go to state 11
    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    ListaComando                   shift and go to state 29
    Comando                        shift and go to state 31
    Expr                           shift and go to state 34
    LValueExpr                     shift and go to state 36
    Bloco                          shift and go to state 42
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 19

    (19) ListaDeclVar -> empty .

    }               reduce using rule 19 (ListaDeclVar -> empty .)
    ;               reduce using rule 19 (ListaDeclVar -> empty .)
    RETORNE         reduce using rule 19 (ListaDeclVar -> empty .)
    LEIA            reduce using rule 19 (ListaDeclVar -> empty .)
    ESCREVA         reduce using rule 19 (ListaDeclVar -> empty .)
    NOVALINHA       reduce using rule 19 (ListaDeclVar -> empty .)
    SE              reduce using rule 19 (ListaDeclVar -> empty .)
    ENQUANTO        reduce using rule 19 (ListaDeclVar -> empty .)
    {               reduce using rule 19 (ListaDeclVar -> empty .)
    ID              reduce using rule 19 (ListaDeclVar -> empty .)
    -               reduce using rule 19 (ListaDeclVar -> empty .)
    !               reduce using rule 19 (ListaDeclVar -> empty .)
    (               reduce using rule 19 (ListaDeclVar -> empty .)
    CARCONST        reduce using rule 19 (ListaDeclVar -> empty .)
    INTCONST        reduce using rule 19 (ListaDeclVar -> empty .)


state 20

    (20) ListaDeclVar -> Tipo . ID DeclVar ; ListaDeclVar
    (21) ListaDeclVar -> Tipo . ID [ INTCONST ] DeclVar ; ListaDeclVar

    ID              shift and go to state 58


state 21

    (2) DeclFuncVar -> Tipo ID DeclVar ; . DeclFuncVar
    (2) DeclFuncVar -> . Tipo ID DeclVar ; DeclFuncVar
    (3) DeclFuncVar -> . Tipo ID [ INTCONST ] DeclVar ; DeclFuncVar
    (4) DeclFuncVar -> . Tipo ID DeclFunc DeclFuncVar
    (5) DeclFuncVar -> . empty
    (22) Tipo -> . INT
    (23) Tipo -> . CAR
    (75) empty -> .

    INT             shift and go to state 5
    CAR             shift and go to state 6
    PROGRAMA        reduce using rule 75 (empty -> .)

    Tipo                           shift and go to state 3
    DeclFuncVar                    shift and go to state 59
    empty                          shift and go to state 4

state 22

    (3) DeclFuncVar -> Tipo ID [ INTCONST . ] DeclVar ; DeclFuncVar

    ]               shift and go to state 60


state 23

    (4) DeclFuncVar -> Tipo ID DeclFunc DeclFuncVar .

    PROGRAMA        reduce using rule 4 (DeclFuncVar -> Tipo ID DeclFunc DeclFuncVar .)


state 24

    (6) DeclVar -> , ID . DeclVar
    (7) DeclVar -> , ID . [ INTCONST ] DeclVar
    (6) DeclVar -> . , ID DeclVar
    (7) DeclVar -> . , ID [ INTCONST ] DeclVar
    (8) DeclVar -> . empty
    (75) empty -> .

    [               shift and go to state 62
    ,               shift and go to state 15
    ;               reduce using rule 75 (empty -> .)

    DeclVar                        shift and go to state 61
    empty                          shift and go to state 16

state 25

    (10) DeclFunc -> ( ListaParametros . ) Bloco

    )               shift and go to state 63


state 26

    (11) ListaParametros -> empty .

    )               reduce using rule 11 (ListaParametros -> empty .)


state 27

    (12) ListaParametros -> ListaParametrosCont .

    )               reduce using rule 12 (ListaParametros -> ListaParametrosCont .)


state 28

    (13) ListaParametrosCont -> Tipo . ID
    (14) ListaParametrosCont -> Tipo . ID [ ]
    (15) ListaParametrosCont -> Tipo . ID , ListaParametrosCont
    (16) ListaParametrosCont -> Tipo . ID [ ] , ListaParametrosCont

    ID              shift and go to state 64


state 29

    (17) Bloco -> { ListaDeclVar ListaComando . }

    }               shift and go to state 65


state 30

    (18) Bloco -> { ListaDeclVar } .

    $end            reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    ;               reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    RETORNE         reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    LEIA            reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    ESCREVA         reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    NOVALINHA       reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    SE              reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    ENQUANTO        reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    {               reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    ID              reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    -               reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    !               reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    (               reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    CARCONST        reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    INTCONST        reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    }               reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    INT             reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    CAR             reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    PROGRAMA        reduce using rule 18 (Bloco -> { ListaDeclVar } .)
    SENAO           reduce using rule 18 (Bloco -> { ListaDeclVar } .)


state 31

    (24) ListaComando -> Comando .
    (25) ListaComando -> Comando . ListaComando
    (24) ListaComando -> . Comando
    (25) ListaComando -> . Comando ListaComando
    (26) Comando -> . ;
    (27) Comando -> . RETORNE Expr ;
    (28) Comando -> . LEIA LValueExpr ;
    (29) Comando -> . ESCREVA Expr ;
    (30) Comando -> . ESCREVA STRING ;
    (31) Comando -> . NOVALINHA ;
    (32) Comando -> . SE ( Expr ) ENTAO Comando
    (33) Comando -> . SE ( Expr ) ENTAO Comando SENAO Comando
    (34) Comando -> . Expr ;
    (35) Comando -> . ENQUANTO ( Expr ) EXECUTE Comando
    (36) Comando -> . Bloco
    (37) Expr -> . AssignExpr
    (17) Bloco -> . { ListaDeclVar ListaComando }
    (18) Bloco -> . { ListaDeclVar }
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    }               reduce using rule 24 (ListaComando -> Comando .)
    ;               shift and go to state 32
    RETORNE         shift and go to state 33
    LEIA            shift and go to state 35
    ESCREVA         shift and go to state 37
    NOVALINHA       shift and go to state 38
    SE              shift and go to state 39
    ENQUANTO        shift and go to state 41
    {               shift and go to state 11
    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Comando                        shift and go to state 31
    ListaComando                   shift and go to state 66
    Expr                           shift and go to state 34
    LValueExpr                     shift and go to state 36
    Bloco                          shift and go to state 42
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 32

    (26) Comando -> ; .

    ;               reduce using rule 26 (Comando -> ; .)
    RETORNE         reduce using rule 26 (Comando -> ; .)
    LEIA            reduce using rule 26 (Comando -> ; .)
    ESCREVA         reduce using rule 26 (Comando -> ; .)
    NOVALINHA       reduce using rule 26 (Comando -> ; .)
    SE              reduce using rule 26 (Comando -> ; .)
    ENQUANTO        reduce using rule 26 (Comando -> ; .)
    {               reduce using rule 26 (Comando -> ; .)
    ID              reduce using rule 26 (Comando -> ; .)
    -               reduce using rule 26 (Comando -> ; .)
    !               reduce using rule 26 (Comando -> ; .)
    (               reduce using rule 26 (Comando -> ; .)
    CARCONST        reduce using rule 26 (Comando -> ; .)
    INTCONST        reduce using rule 26 (Comando -> ; .)
    }               reduce using rule 26 (Comando -> ; .)
    SENAO           reduce using rule 26 (Comando -> ; .)


state 33

    (27) Comando -> RETORNE . Expr ;
    (37) Expr -> . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 67
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 34

    (34) Comando -> Expr . ;

    ;               shift and go to state 68


state 35

    (28) Comando -> LEIA . LValueExpr ;
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID

    ID              shift and go to state 70

    LValueExpr                     shift and go to state 69

state 36

    (39) AssignExpr -> LValueExpr . = AssignExpr

    =               shift and go to state 71


state 37

    (29) Comando -> ESCREVA . Expr ;
    (30) Comando -> ESCREVA . STRING ;
    (37) Expr -> . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    STRING          shift and go to state 73
    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 72
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 38

    (31) Comando -> NOVALINHA . ;

    ;               shift and go to state 74


state 39

    (32) Comando -> SE . ( Expr ) ENTAO Comando
    (33) Comando -> SE . ( Expr ) ENTAO Comando SENAO Comando

    (               shift and go to state 75


state 40

    (69) PrimExpr -> ( . Expr )
    (37) Expr -> . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 76
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 41

    (35) Comando -> ENQUANTO . ( Expr ) EXECUTE Comando

    (               shift and go to state 77


state 42

    (36) Comando -> Bloco .

    ;               reduce using rule 36 (Comando -> Bloco .)
    RETORNE         reduce using rule 36 (Comando -> Bloco .)
    LEIA            reduce using rule 36 (Comando -> Bloco .)
    ESCREVA         reduce using rule 36 (Comando -> Bloco .)
    NOVALINHA       reduce using rule 36 (Comando -> Bloco .)
    SE              reduce using rule 36 (Comando -> Bloco .)
    ENQUANTO        reduce using rule 36 (Comando -> Bloco .)
    {               reduce using rule 36 (Comando -> Bloco .)
    ID              reduce using rule 36 (Comando -> Bloco .)
    -               reduce using rule 36 (Comando -> Bloco .)
    !               reduce using rule 36 (Comando -> Bloco .)
    (               reduce using rule 36 (Comando -> Bloco .)
    CARCONST        reduce using rule 36 (Comando -> Bloco .)
    INTCONST        reduce using rule 36 (Comando -> Bloco .)
    }               reduce using rule 36 (Comando -> Bloco .)
    SENAO           reduce using rule 36 (Comando -> Bloco .)


state 43

    (37) Expr -> AssignExpr .

    ;               reduce using rule 37 (Expr -> AssignExpr .)
    )               reduce using rule 37 (Expr -> AssignExpr .)
    :               reduce using rule 37 (Expr -> AssignExpr .)
    ]               reduce using rule 37 (Expr -> AssignExpr .)


state 44

    (38) AssignExpr -> CondExpr .

    ;               reduce using rule 38 (AssignExpr -> CondExpr .)
    )               reduce using rule 38 (AssignExpr -> CondExpr .)
    :               reduce using rule 38 (AssignExpr -> CondExpr .)
    ]               reduce using rule 38 (AssignExpr -> CondExpr .)
    ,               reduce using rule 38 (AssignExpr -> CondExpr .)


state 45

    (40) CondExpr -> OrExpr .
    (41) CondExpr -> OrExpr . ? Expr : CondExpr
    (42) OrExpr -> OrExpr . OU AndExpr

    ;               reduce using rule 40 (CondExpr -> OrExpr .)
    )               reduce using rule 40 (CondExpr -> OrExpr .)
    :               reduce using rule 40 (CondExpr -> OrExpr .)
    ]               reduce using rule 40 (CondExpr -> OrExpr .)
    ,               reduce using rule 40 (CondExpr -> OrExpr .)
    ?               shift and go to state 78
    OU              shift and go to state 79


state 46

    (64) LValueExpr -> ID . [ Expr ]
    (65) LValueExpr -> ID .
    (66) PrimExpr -> ID . ( )
    (67) PrimExpr -> ID . ( ListExpr )
    (68) PrimExpr -> ID . [ Expr ]
    (72) PrimExpr -> ID .

    [               shift and go to state 80
    =               reduce using rule 65 (LValueExpr -> ID .)
    (               shift and go to state 81
    *               reduce using rule 72 (PrimExpr -> ID .)
    /               reduce using rule 72 (PrimExpr -> ID .)
    %               reduce using rule 72 (PrimExpr -> ID .)
    +               reduce using rule 72 (PrimExpr -> ID .)
    -               reduce using rule 72 (PrimExpr -> ID .)
    <               reduce using rule 72 (PrimExpr -> ID .)
    >               reduce using rule 72 (PrimExpr -> ID .)
    GEQ             reduce using rule 72 (PrimExpr -> ID .)
    LEQ             reduce using rule 72 (PrimExpr -> ID .)
    EQUAL           reduce using rule 72 (PrimExpr -> ID .)
    DIFF            reduce using rule 72 (PrimExpr -> ID .)
    E               reduce using rule 72 (PrimExpr -> ID .)
    ?               reduce using rule 72 (PrimExpr -> ID .)
    OU              reduce using rule 72 (PrimExpr -> ID .)
    ;               reduce using rule 72 (PrimExpr -> ID .)
    )               reduce using rule 72 (PrimExpr -> ID .)
    :               reduce using rule 72 (PrimExpr -> ID .)
    ]               reduce using rule 72 (PrimExpr -> ID .)
    ,               reduce using rule 72 (PrimExpr -> ID .)


state 47

    (43) OrExpr -> AndExpr .
    (44) AndExpr -> AndExpr . E EqExpr

    ?               reduce using rule 43 (OrExpr -> AndExpr .)
    OU              reduce using rule 43 (OrExpr -> AndExpr .)
    ;               reduce using rule 43 (OrExpr -> AndExpr .)
    )               reduce using rule 43 (OrExpr -> AndExpr .)
    :               reduce using rule 43 (OrExpr -> AndExpr .)
    ]               reduce using rule 43 (OrExpr -> AndExpr .)
    ,               reduce using rule 43 (OrExpr -> AndExpr .)
    E               shift and go to state 82


state 48

    (45) AndExpr -> EqExpr .
    (46) EqExpr -> EqExpr . EQUAL DesigExpr
    (48) EqExpr -> EqExpr . DIFF DesigExpr

    E               reduce using rule 45 (AndExpr -> EqExpr .)
    ?               reduce using rule 45 (AndExpr -> EqExpr .)
    OU              reduce using rule 45 (AndExpr -> EqExpr .)
    ;               reduce using rule 45 (AndExpr -> EqExpr .)
    )               reduce using rule 45 (AndExpr -> EqExpr .)
    :               reduce using rule 45 (AndExpr -> EqExpr .)
    ]               reduce using rule 45 (AndExpr -> EqExpr .)
    ,               reduce using rule 45 (AndExpr -> EqExpr .)
    EQUAL           shift and go to state 83
    DIFF            shift and go to state 84


state 49

    (47) EqExpr -> DesigExpr .
    (49) DesigExpr -> DesigExpr . < AddExpr
    (50) DesigExpr -> DesigExpr . > AddExpr
    (52) DesigExpr -> DesigExpr . GEQ AddExpr
    (53) DesigExpr -> DesigExpr . LEQ AddExpr

    EQUAL           reduce using rule 47 (EqExpr -> DesigExpr .)
    DIFF            reduce using rule 47 (EqExpr -> DesigExpr .)
    E               reduce using rule 47 (EqExpr -> DesigExpr .)
    ?               reduce using rule 47 (EqExpr -> DesigExpr .)
    OU              reduce using rule 47 (EqExpr -> DesigExpr .)
    ;               reduce using rule 47 (EqExpr -> DesigExpr .)
    )               reduce using rule 47 (EqExpr -> DesigExpr .)
    :               reduce using rule 47 (EqExpr -> DesigExpr .)
    ]               reduce using rule 47 (EqExpr -> DesigExpr .)
    ,               reduce using rule 47 (EqExpr -> DesigExpr .)
    <               shift and go to state 85
    >               shift and go to state 86
    GEQ             shift and go to state 87
    LEQ             shift and go to state 88


state 50

    (51) DesigExpr -> AddExpr .
    (54) AddExpr -> AddExpr . + MulExpr
    (55) AddExpr -> AddExpr . - MulExpr

    <               reduce using rule 51 (DesigExpr -> AddExpr .)
    >               reduce using rule 51 (DesigExpr -> AddExpr .)
    GEQ             reduce using rule 51 (DesigExpr -> AddExpr .)
    LEQ             reduce using rule 51 (DesigExpr -> AddExpr .)
    EQUAL           reduce using rule 51 (DesigExpr -> AddExpr .)
    DIFF            reduce using rule 51 (DesigExpr -> AddExpr .)
    E               reduce using rule 51 (DesigExpr -> AddExpr .)
    ?               reduce using rule 51 (DesigExpr -> AddExpr .)
    OU              reduce using rule 51 (DesigExpr -> AddExpr .)
    ;               reduce using rule 51 (DesigExpr -> AddExpr .)
    )               reduce using rule 51 (DesigExpr -> AddExpr .)
    :               reduce using rule 51 (DesigExpr -> AddExpr .)
    ]               reduce using rule 51 (DesigExpr -> AddExpr .)
    ,               reduce using rule 51 (DesigExpr -> AddExpr .)
    +               shift and go to state 89
    -               shift and go to state 90


state 51

    (56) AddExpr -> MulExpr .
    (57) MulExpr -> MulExpr . * UnExpr
    (58) MulExpr -> MulExpr . / UnExpr
    (59) MulExpr -> MulExpr . % UnExpr

    +               reduce using rule 56 (AddExpr -> MulExpr .)
    -               reduce using rule 56 (AddExpr -> MulExpr .)
    <               reduce using rule 56 (AddExpr -> MulExpr .)
    >               reduce using rule 56 (AddExpr -> MulExpr .)
    GEQ             reduce using rule 56 (AddExpr -> MulExpr .)
    LEQ             reduce using rule 56 (AddExpr -> MulExpr .)
    EQUAL           reduce using rule 56 (AddExpr -> MulExpr .)
    DIFF            reduce using rule 56 (AddExpr -> MulExpr .)
    E               reduce using rule 56 (AddExpr -> MulExpr .)
    ?               reduce using rule 56 (AddExpr -> MulExpr .)
    OU              reduce using rule 56 (AddExpr -> MulExpr .)
    ;               reduce using rule 56 (AddExpr -> MulExpr .)
    )               reduce using rule 56 (AddExpr -> MulExpr .)
    :               reduce using rule 56 (AddExpr -> MulExpr .)
    ]               reduce using rule 56 (AddExpr -> MulExpr .)
    ,               reduce using rule 56 (AddExpr -> MulExpr .)
    *               shift and go to state 91
    /               shift and go to state 92
    %               shift and go to state 93


state 52

    (61) UnExpr -> - . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    PrimExpr                       shift and go to state 94

state 53

    (60) MulExpr -> UnExpr .

    *               reduce using rule 60 (MulExpr -> UnExpr .)
    /               reduce using rule 60 (MulExpr -> UnExpr .)
    %               reduce using rule 60 (MulExpr -> UnExpr .)
    +               reduce using rule 60 (MulExpr -> UnExpr .)
    -               reduce using rule 60 (MulExpr -> UnExpr .)
    <               reduce using rule 60 (MulExpr -> UnExpr .)
    >               reduce using rule 60 (MulExpr -> UnExpr .)
    GEQ             reduce using rule 60 (MulExpr -> UnExpr .)
    LEQ             reduce using rule 60 (MulExpr -> UnExpr .)
    EQUAL           reduce using rule 60 (MulExpr -> UnExpr .)
    DIFF            reduce using rule 60 (MulExpr -> UnExpr .)
    E               reduce using rule 60 (MulExpr -> UnExpr .)
    ?               reduce using rule 60 (MulExpr -> UnExpr .)
    OU              reduce using rule 60 (MulExpr -> UnExpr .)
    ;               reduce using rule 60 (MulExpr -> UnExpr .)
    )               reduce using rule 60 (MulExpr -> UnExpr .)
    :               reduce using rule 60 (MulExpr -> UnExpr .)
    ]               reduce using rule 60 (MulExpr -> UnExpr .)
    ,               reduce using rule 60 (MulExpr -> UnExpr .)


state 54

    (63) UnExpr -> PrimExpr .

    *               reduce using rule 63 (UnExpr -> PrimExpr .)
    /               reduce using rule 63 (UnExpr -> PrimExpr .)
    %               reduce using rule 63 (UnExpr -> PrimExpr .)
    +               reduce using rule 63 (UnExpr -> PrimExpr .)
    -               reduce using rule 63 (UnExpr -> PrimExpr .)
    <               reduce using rule 63 (UnExpr -> PrimExpr .)
    >               reduce using rule 63 (UnExpr -> PrimExpr .)
    GEQ             reduce using rule 63 (UnExpr -> PrimExpr .)
    LEQ             reduce using rule 63 (UnExpr -> PrimExpr .)
    EQUAL           reduce using rule 63 (UnExpr -> PrimExpr .)
    DIFF            reduce using rule 63 (UnExpr -> PrimExpr .)
    E               reduce using rule 63 (UnExpr -> PrimExpr .)
    ?               reduce using rule 63 (UnExpr -> PrimExpr .)
    OU              reduce using rule 63 (UnExpr -> PrimExpr .)
    ;               reduce using rule 63 (UnExpr -> PrimExpr .)
    )               reduce using rule 63 (UnExpr -> PrimExpr .)
    :               reduce using rule 63 (UnExpr -> PrimExpr .)
    ]               reduce using rule 63 (UnExpr -> PrimExpr .)
    ,               reduce using rule 63 (UnExpr -> PrimExpr .)


state 55

    (62) UnExpr -> ! . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    PrimExpr                       shift and go to state 96

state 56

    (70) PrimExpr -> CARCONST .

    *               reduce using rule 70 (PrimExpr -> CARCONST .)
    /               reduce using rule 70 (PrimExpr -> CARCONST .)
    %               reduce using rule 70 (PrimExpr -> CARCONST .)
    +               reduce using rule 70 (PrimExpr -> CARCONST .)
    -               reduce using rule 70 (PrimExpr -> CARCONST .)
    <               reduce using rule 70 (PrimExpr -> CARCONST .)
    >               reduce using rule 70 (PrimExpr -> CARCONST .)
    GEQ             reduce using rule 70 (PrimExpr -> CARCONST .)
    LEQ             reduce using rule 70 (PrimExpr -> CARCONST .)
    EQUAL           reduce using rule 70 (PrimExpr -> CARCONST .)
    DIFF            reduce using rule 70 (PrimExpr -> CARCONST .)
    E               reduce using rule 70 (PrimExpr -> CARCONST .)
    ?               reduce using rule 70 (PrimExpr -> CARCONST .)
    OU              reduce using rule 70 (PrimExpr -> CARCONST .)
    ;               reduce using rule 70 (PrimExpr -> CARCONST .)
    )               reduce using rule 70 (PrimExpr -> CARCONST .)
    :               reduce using rule 70 (PrimExpr -> CARCONST .)
    ]               reduce using rule 70 (PrimExpr -> CARCONST .)
    ,               reduce using rule 70 (PrimExpr -> CARCONST .)


state 57

    (71) PrimExpr -> INTCONST .

    *               reduce using rule 71 (PrimExpr -> INTCONST .)
    /               reduce using rule 71 (PrimExpr -> INTCONST .)
    %               reduce using rule 71 (PrimExpr -> INTCONST .)
    +               reduce using rule 71 (PrimExpr -> INTCONST .)
    -               reduce using rule 71 (PrimExpr -> INTCONST .)
    <               reduce using rule 71 (PrimExpr -> INTCONST .)
    >               reduce using rule 71 (PrimExpr -> INTCONST .)
    GEQ             reduce using rule 71 (PrimExpr -> INTCONST .)
    LEQ             reduce using rule 71 (PrimExpr -> INTCONST .)
    EQUAL           reduce using rule 71 (PrimExpr -> INTCONST .)
    DIFF            reduce using rule 71 (PrimExpr -> INTCONST .)
    E               reduce using rule 71 (PrimExpr -> INTCONST .)
    ?               reduce using rule 71 (PrimExpr -> INTCONST .)
    OU              reduce using rule 71 (PrimExpr -> INTCONST .)
    ;               reduce using rule 71 (PrimExpr -> INTCONST .)
    )               reduce using rule 71 (PrimExpr -> INTCONST .)
    :               reduce using rule 71 (PrimExpr -> INTCONST .)
    ]               reduce using rule 71 (PrimExpr -> INTCONST .)
    ,               reduce using rule 71 (PrimExpr -> INTCONST .)


state 58

    (20) ListaDeclVar -> Tipo ID . DeclVar ; ListaDeclVar
    (21) ListaDeclVar -> Tipo ID . [ INTCONST ] DeclVar ; ListaDeclVar
    (6) DeclVar -> . , ID DeclVar
    (7) DeclVar -> . , ID [ INTCONST ] DeclVar
    (8) DeclVar -> . empty
    (75) empty -> .

    [               shift and go to state 98
    ,               shift and go to state 15
    ;               reduce using rule 75 (empty -> .)

    DeclVar                        shift and go to state 97
    empty                          shift and go to state 16

state 59

    (2) DeclFuncVar -> Tipo ID DeclVar ; DeclFuncVar .

    PROGRAMA        reduce using rule 2 (DeclFuncVar -> Tipo ID DeclVar ; DeclFuncVar .)


state 60

    (3) DeclFuncVar -> Tipo ID [ INTCONST ] . DeclVar ; DeclFuncVar
    (6) DeclVar -> . , ID DeclVar
    (7) DeclVar -> . , ID [ INTCONST ] DeclVar
    (8) DeclVar -> . empty
    (75) empty -> .

    ,               shift and go to state 15
    ;               reduce using rule 75 (empty -> .)

    DeclVar                        shift and go to state 99
    empty                          shift and go to state 16

state 61

    (6) DeclVar -> , ID DeclVar .

    ;               reduce using rule 6 (DeclVar -> , ID DeclVar .)


state 62

    (7) DeclVar -> , ID [ . INTCONST ] DeclVar

    INTCONST        shift and go to state 100


state 63

    (10) DeclFunc -> ( ListaParametros ) . Bloco
    (17) Bloco -> . { ListaDeclVar ListaComando }
    (18) Bloco -> . { ListaDeclVar }

    {               shift and go to state 11

    Bloco                          shift and go to state 101

state 64

    (13) ListaParametrosCont -> Tipo ID .
    (14) ListaParametrosCont -> Tipo ID . [ ]
    (15) ListaParametrosCont -> Tipo ID . , ListaParametrosCont
    (16) ListaParametrosCont -> Tipo ID . [ ] , ListaParametrosCont

    )               reduce using rule 13 (ListaParametrosCont -> Tipo ID .)
    [               shift and go to state 102
    ,               shift and go to state 103


state 65

    (17) Bloco -> { ListaDeclVar ListaComando } .

    $end            reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    ;               reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    RETORNE         reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    LEIA            reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    ESCREVA         reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    NOVALINHA       reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    SE              reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    ENQUANTO        reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    {               reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    ID              reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    -               reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    !               reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    (               reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    CARCONST        reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    INTCONST        reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    }               reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    INT             reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    CAR             reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    PROGRAMA        reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)
    SENAO           reduce using rule 17 (Bloco -> { ListaDeclVar ListaComando } .)


state 66

    (25) ListaComando -> Comando ListaComando .

    }               reduce using rule 25 (ListaComando -> Comando ListaComando .)


state 67

    (27) Comando -> RETORNE Expr . ;

    ;               shift and go to state 104


state 68

    (34) Comando -> Expr ; .

    ;               reduce using rule 34 (Comando -> Expr ; .)
    RETORNE         reduce using rule 34 (Comando -> Expr ; .)
    LEIA            reduce using rule 34 (Comando -> Expr ; .)
    ESCREVA         reduce using rule 34 (Comando -> Expr ; .)
    NOVALINHA       reduce using rule 34 (Comando -> Expr ; .)
    SE              reduce using rule 34 (Comando -> Expr ; .)
    ENQUANTO        reduce using rule 34 (Comando -> Expr ; .)
    {               reduce using rule 34 (Comando -> Expr ; .)
    ID              reduce using rule 34 (Comando -> Expr ; .)
    -               reduce using rule 34 (Comando -> Expr ; .)
    !               reduce using rule 34 (Comando -> Expr ; .)
    (               reduce using rule 34 (Comando -> Expr ; .)
    CARCONST        reduce using rule 34 (Comando -> Expr ; .)
    INTCONST        reduce using rule 34 (Comando -> Expr ; .)
    }               reduce using rule 34 (Comando -> Expr ; .)
    SENAO           reduce using rule 34 (Comando -> Expr ; .)


state 69

    (28) Comando -> LEIA LValueExpr . ;

    ;               shift and go to state 105


state 70

    (64) LValueExpr -> ID . [ Expr ]
    (65) LValueExpr -> ID .

    [               shift and go to state 106
    ;               reduce using rule 65 (LValueExpr -> ID .)


state 71

    (39) AssignExpr -> LValueExpr = . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    LValueExpr                     shift and go to state 36
    AssignExpr                     shift and go to state 107
    CondExpr                       shift and go to state 44
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 72

    (29) Comando -> ESCREVA Expr . ;

    ;               shift and go to state 108


state 73

    (30) Comando -> ESCREVA STRING . ;

    ;               shift and go to state 109


state 74

    (31) Comando -> NOVALINHA ; .

    ;               reduce using rule 31 (Comando -> NOVALINHA ; .)
    RETORNE         reduce using rule 31 (Comando -> NOVALINHA ; .)
    LEIA            reduce using rule 31 (Comando -> NOVALINHA ; .)
    ESCREVA         reduce using rule 31 (Comando -> NOVALINHA ; .)
    NOVALINHA       reduce using rule 31 (Comando -> NOVALINHA ; .)
    SE              reduce using rule 31 (Comando -> NOVALINHA ; .)
    ENQUANTO        reduce using rule 31 (Comando -> NOVALINHA ; .)
    {               reduce using rule 31 (Comando -> NOVALINHA ; .)
    ID              reduce using rule 31 (Comando -> NOVALINHA ; .)
    -               reduce using rule 31 (Comando -> NOVALINHA ; .)
    !               reduce using rule 31 (Comando -> NOVALINHA ; .)
    (               reduce using rule 31 (Comando -> NOVALINHA ; .)
    CARCONST        reduce using rule 31 (Comando -> NOVALINHA ; .)
    INTCONST        reduce using rule 31 (Comando -> NOVALINHA ; .)
    }               reduce using rule 31 (Comando -> NOVALINHA ; .)
    SENAO           reduce using rule 31 (Comando -> NOVALINHA ; .)


state 75

    (32) Comando -> SE ( . Expr ) ENTAO Comando
    (33) Comando -> SE ( . Expr ) ENTAO Comando SENAO Comando
    (37) Expr -> . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 110
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 76

    (69) PrimExpr -> ( Expr . )

    )               shift and go to state 111


state 77

    (35) Comando -> ENQUANTO ( . Expr ) EXECUTE Comando
    (37) Expr -> . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 112
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 78

    (41) CondExpr -> OrExpr ? . Expr : CondExpr
    (37) Expr -> . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    OrExpr                         shift and go to state 45
    Expr                           shift and go to state 113
    CondExpr                       shift and go to state 44
    AssignExpr                     shift and go to state 43
    LValueExpr                     shift and go to state 36
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 79

    (42) OrExpr -> OrExpr OU . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    AndExpr                        shift and go to state 114
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 80

    (64) LValueExpr -> ID [ . Expr ]
    (68) PrimExpr -> ID [ . Expr ]
    (37) Expr -> . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 115
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 81

    (66) PrimExpr -> ID ( . )
    (67) PrimExpr -> ID ( . ListExpr )
    (73) ListExpr -> . AssignExpr
    (74) ListExpr -> . ListExpr , AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    )               shift and go to state 116
    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    ListExpr                       shift and go to state 117
    AssignExpr                     shift and go to state 118
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 82

    (44) AndExpr -> AndExpr E . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    EqExpr                         shift and go to state 119
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 83

    (46) EqExpr -> EqExpr EQUAL . DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    DesigExpr                      shift and go to state 120
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 84

    (48) EqExpr -> EqExpr DIFF . DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    DesigExpr                      shift and go to state 121
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 85

    (49) DesigExpr -> DesigExpr < . AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    AddExpr                        shift and go to state 122
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 86

    (50) DesigExpr -> DesigExpr > . AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    AddExpr                        shift and go to state 123
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 87

    (52) DesigExpr -> DesigExpr GEQ . AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    AddExpr                        shift and go to state 124
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 88

    (53) DesigExpr -> DesigExpr LEQ . AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    AddExpr                        shift and go to state 125
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 89

    (54) AddExpr -> AddExpr + . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    MulExpr                        shift and go to state 126
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 90

    (55) AddExpr -> AddExpr - . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    MulExpr                        shift and go to state 127
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 91

    (57) MulExpr -> MulExpr * . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    UnExpr                         shift and go to state 128
    PrimExpr                       shift and go to state 54

state 92

    (58) MulExpr -> MulExpr / . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    UnExpr                         shift and go to state 129
    PrimExpr                       shift and go to state 54

state 93

    (59) MulExpr -> MulExpr % . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    UnExpr                         shift and go to state 130
    PrimExpr                       shift and go to state 54

state 94

    (61) UnExpr -> - PrimExpr .

    *               reduce using rule 61 (UnExpr -> - PrimExpr .)
    /               reduce using rule 61 (UnExpr -> - PrimExpr .)
    %               reduce using rule 61 (UnExpr -> - PrimExpr .)
    +               reduce using rule 61 (UnExpr -> - PrimExpr .)
    -               reduce using rule 61 (UnExpr -> - PrimExpr .)
    <               reduce using rule 61 (UnExpr -> - PrimExpr .)
    >               reduce using rule 61 (UnExpr -> - PrimExpr .)
    GEQ             reduce using rule 61 (UnExpr -> - PrimExpr .)
    LEQ             reduce using rule 61 (UnExpr -> - PrimExpr .)
    EQUAL           reduce using rule 61 (UnExpr -> - PrimExpr .)
    DIFF            reduce using rule 61 (UnExpr -> - PrimExpr .)
    E               reduce using rule 61 (UnExpr -> - PrimExpr .)
    ?               reduce using rule 61 (UnExpr -> - PrimExpr .)
    OU              reduce using rule 61 (UnExpr -> - PrimExpr .)
    ;               reduce using rule 61 (UnExpr -> - PrimExpr .)
    )               reduce using rule 61 (UnExpr -> - PrimExpr .)
    :               reduce using rule 61 (UnExpr -> - PrimExpr .)
    ]               reduce using rule 61 (UnExpr -> - PrimExpr .)
    ,               reduce using rule 61 (UnExpr -> - PrimExpr .)


state 95

    (66) PrimExpr -> ID . ( )
    (67) PrimExpr -> ID . ( ListExpr )
    (68) PrimExpr -> ID . [ Expr ]
    (72) PrimExpr -> ID .

    (               shift and go to state 81
    [               shift and go to state 131
    *               reduce using rule 72 (PrimExpr -> ID .)
    /               reduce using rule 72 (PrimExpr -> ID .)
    %               reduce using rule 72 (PrimExpr -> ID .)
    +               reduce using rule 72 (PrimExpr -> ID .)
    -               reduce using rule 72 (PrimExpr -> ID .)
    <               reduce using rule 72 (PrimExpr -> ID .)
    >               reduce using rule 72 (PrimExpr -> ID .)
    GEQ             reduce using rule 72 (PrimExpr -> ID .)
    LEQ             reduce using rule 72 (PrimExpr -> ID .)
    EQUAL           reduce using rule 72 (PrimExpr -> ID .)
    DIFF            reduce using rule 72 (PrimExpr -> ID .)
    E               reduce using rule 72 (PrimExpr -> ID .)
    ?               reduce using rule 72 (PrimExpr -> ID .)
    OU              reduce using rule 72 (PrimExpr -> ID .)
    ;               reduce using rule 72 (PrimExpr -> ID .)
    )               reduce using rule 72 (PrimExpr -> ID .)
    :               reduce using rule 72 (PrimExpr -> ID .)
    ]               reduce using rule 72 (PrimExpr -> ID .)
    ,               reduce using rule 72 (PrimExpr -> ID .)


state 96

    (62) UnExpr -> ! PrimExpr .

    *               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    /               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    %               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    +               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    -               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    <               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    >               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    GEQ             reduce using rule 62 (UnExpr -> ! PrimExpr .)
    LEQ             reduce using rule 62 (UnExpr -> ! PrimExpr .)
    EQUAL           reduce using rule 62 (UnExpr -> ! PrimExpr .)
    DIFF            reduce using rule 62 (UnExpr -> ! PrimExpr .)
    E               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    ?               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    OU              reduce using rule 62 (UnExpr -> ! PrimExpr .)
    ;               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    )               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    :               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    ]               reduce using rule 62 (UnExpr -> ! PrimExpr .)
    ,               reduce using rule 62 (UnExpr -> ! PrimExpr .)


state 97

    (20) ListaDeclVar -> Tipo ID DeclVar . ; ListaDeclVar

    ;               shift and go to state 132


state 98

    (21) ListaDeclVar -> Tipo ID [ . INTCONST ] DeclVar ; ListaDeclVar

    INTCONST        shift and go to state 133


state 99

    (3) DeclFuncVar -> Tipo ID [ INTCONST ] DeclVar . ; DeclFuncVar

    ;               shift and go to state 134


state 100

    (7) DeclVar -> , ID [ INTCONST . ] DeclVar

    ]               shift and go to state 135


state 101

    (10) DeclFunc -> ( ListaParametros ) Bloco .

    INT             reduce using rule 10 (DeclFunc -> ( ListaParametros ) Bloco .)
    CAR             reduce using rule 10 (DeclFunc -> ( ListaParametros ) Bloco .)
    PROGRAMA        reduce using rule 10 (DeclFunc -> ( ListaParametros ) Bloco .)


state 102

    (14) ListaParametrosCont -> Tipo ID [ . ]
    (16) ListaParametrosCont -> Tipo ID [ . ] , ListaParametrosCont

    ]               shift and go to state 136


state 103

    (15) ListaParametrosCont -> Tipo ID , . ListaParametrosCont
    (13) ListaParametrosCont -> . Tipo ID
    (14) ListaParametrosCont -> . Tipo ID [ ]
    (15) ListaParametrosCont -> . Tipo ID , ListaParametrosCont
    (16) ListaParametrosCont -> . Tipo ID [ ] , ListaParametrosCont
    (22) Tipo -> . INT
    (23) Tipo -> . CAR

    INT             shift and go to state 5
    CAR             shift and go to state 6

    Tipo                           shift and go to state 28
    ListaParametrosCont            shift and go to state 137

state 104

    (27) Comando -> RETORNE Expr ; .

    ;               reduce using rule 27 (Comando -> RETORNE Expr ; .)
    RETORNE         reduce using rule 27 (Comando -> RETORNE Expr ; .)
    LEIA            reduce using rule 27 (Comando -> RETORNE Expr ; .)
    ESCREVA         reduce using rule 27 (Comando -> RETORNE Expr ; .)
    NOVALINHA       reduce using rule 27 (Comando -> RETORNE Expr ; .)
    SE              reduce using rule 27 (Comando -> RETORNE Expr ; .)
    ENQUANTO        reduce using rule 27 (Comando -> RETORNE Expr ; .)
    {               reduce using rule 27 (Comando -> RETORNE Expr ; .)
    ID              reduce using rule 27 (Comando -> RETORNE Expr ; .)
    -               reduce using rule 27 (Comando -> RETORNE Expr ; .)
    !               reduce using rule 27 (Comando -> RETORNE Expr ; .)
    (               reduce using rule 27 (Comando -> RETORNE Expr ; .)
    CARCONST        reduce using rule 27 (Comando -> RETORNE Expr ; .)
    INTCONST        reduce using rule 27 (Comando -> RETORNE Expr ; .)
    }               reduce using rule 27 (Comando -> RETORNE Expr ; .)
    SENAO           reduce using rule 27 (Comando -> RETORNE Expr ; .)


state 105

    (28) Comando -> LEIA LValueExpr ; .

    ;               reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    RETORNE         reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    LEIA            reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    ESCREVA         reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    NOVALINHA       reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    SE              reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    ENQUANTO        reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    {               reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    ID              reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    -               reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    !               reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    (               reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    CARCONST        reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    INTCONST        reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    }               reduce using rule 28 (Comando -> LEIA LValueExpr ; .)
    SENAO           reduce using rule 28 (Comando -> LEIA LValueExpr ; .)


state 106

    (64) LValueExpr -> ID [ . Expr ]
    (37) Expr -> . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 138
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 107

    (39) AssignExpr -> LValueExpr = AssignExpr .

    ;               reduce using rule 39 (AssignExpr -> LValueExpr = AssignExpr .)
    )               reduce using rule 39 (AssignExpr -> LValueExpr = AssignExpr .)
    :               reduce using rule 39 (AssignExpr -> LValueExpr = AssignExpr .)
    ]               reduce using rule 39 (AssignExpr -> LValueExpr = AssignExpr .)
    ,               reduce using rule 39 (AssignExpr -> LValueExpr = AssignExpr .)


state 108

    (29) Comando -> ESCREVA Expr ; .

    ;               reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    RETORNE         reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    LEIA            reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    ESCREVA         reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    NOVALINHA       reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    SE              reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    ENQUANTO        reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    {               reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    ID              reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    -               reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    !               reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    (               reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    CARCONST        reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    INTCONST        reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    }               reduce using rule 29 (Comando -> ESCREVA Expr ; .)
    SENAO           reduce using rule 29 (Comando -> ESCREVA Expr ; .)


state 109

    (30) Comando -> ESCREVA STRING ; .

    ;               reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    RETORNE         reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    LEIA            reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    ESCREVA         reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    NOVALINHA       reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    SE              reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    ENQUANTO        reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    {               reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    ID              reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    -               reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    !               reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    (               reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    CARCONST        reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    INTCONST        reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    }               reduce using rule 30 (Comando -> ESCREVA STRING ; .)
    SENAO           reduce using rule 30 (Comando -> ESCREVA STRING ; .)


state 110

    (32) Comando -> SE ( Expr . ) ENTAO Comando
    (33) Comando -> SE ( Expr . ) ENTAO Comando SENAO Comando

    )               shift and go to state 139


state 111

    (69) PrimExpr -> ( Expr ) .

    *               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    /               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    %               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    +               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    -               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    <               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    >               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    GEQ             reduce using rule 69 (PrimExpr -> ( Expr ) .)
    LEQ             reduce using rule 69 (PrimExpr -> ( Expr ) .)
    EQUAL           reduce using rule 69 (PrimExpr -> ( Expr ) .)
    DIFF            reduce using rule 69 (PrimExpr -> ( Expr ) .)
    E               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    ?               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    OU              reduce using rule 69 (PrimExpr -> ( Expr ) .)
    ;               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    )               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    :               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    ]               reduce using rule 69 (PrimExpr -> ( Expr ) .)
    ,               reduce using rule 69 (PrimExpr -> ( Expr ) .)


state 112

    (35) Comando -> ENQUANTO ( Expr . ) EXECUTE Comando

    )               shift and go to state 140


state 113

    (41) CondExpr -> OrExpr ? Expr . : CondExpr

    :               shift and go to state 141


state 114

    (42) OrExpr -> OrExpr OU AndExpr .
    (44) AndExpr -> AndExpr . E EqExpr

    ?               reduce using rule 42 (OrExpr -> OrExpr OU AndExpr .)
    OU              reduce using rule 42 (OrExpr -> OrExpr OU AndExpr .)
    ;               reduce using rule 42 (OrExpr -> OrExpr OU AndExpr .)
    )               reduce using rule 42 (OrExpr -> OrExpr OU AndExpr .)
    :               reduce using rule 42 (OrExpr -> OrExpr OU AndExpr .)
    ]               reduce using rule 42 (OrExpr -> OrExpr OU AndExpr .)
    ,               reduce using rule 42 (OrExpr -> OrExpr OU AndExpr .)
    E               shift and go to state 82


state 115

    (64) LValueExpr -> ID [ Expr . ]
    (68) PrimExpr -> ID [ Expr . ]

    ]               shift and go to state 142


state 116

    (66) PrimExpr -> ID ( ) .

    *               reduce using rule 66 (PrimExpr -> ID ( ) .)
    /               reduce using rule 66 (PrimExpr -> ID ( ) .)
    %               reduce using rule 66 (PrimExpr -> ID ( ) .)
    +               reduce using rule 66 (PrimExpr -> ID ( ) .)
    -               reduce using rule 66 (PrimExpr -> ID ( ) .)
    <               reduce using rule 66 (PrimExpr -> ID ( ) .)
    >               reduce using rule 66 (PrimExpr -> ID ( ) .)
    GEQ             reduce using rule 66 (PrimExpr -> ID ( ) .)
    LEQ             reduce using rule 66 (PrimExpr -> ID ( ) .)
    EQUAL           reduce using rule 66 (PrimExpr -> ID ( ) .)
    DIFF            reduce using rule 66 (PrimExpr -> ID ( ) .)
    E               reduce using rule 66 (PrimExpr -> ID ( ) .)
    ?               reduce using rule 66 (PrimExpr -> ID ( ) .)
    OU              reduce using rule 66 (PrimExpr -> ID ( ) .)
    ;               reduce using rule 66 (PrimExpr -> ID ( ) .)
    )               reduce using rule 66 (PrimExpr -> ID ( ) .)
    :               reduce using rule 66 (PrimExpr -> ID ( ) .)
    ]               reduce using rule 66 (PrimExpr -> ID ( ) .)
    ,               reduce using rule 66 (PrimExpr -> ID ( ) .)


state 117

    (67) PrimExpr -> ID ( ListExpr . )
    (74) ListExpr -> ListExpr . , AssignExpr

    )               shift and go to state 143
    ,               shift and go to state 144


state 118

    (73) ListExpr -> AssignExpr .

    )               reduce using rule 73 (ListExpr -> AssignExpr .)
    ,               reduce using rule 73 (ListExpr -> AssignExpr .)


state 119

    (44) AndExpr -> AndExpr E EqExpr .
    (46) EqExpr -> EqExpr . EQUAL DesigExpr
    (48) EqExpr -> EqExpr . DIFF DesigExpr

    E               reduce using rule 44 (AndExpr -> AndExpr E EqExpr .)
    ?               reduce using rule 44 (AndExpr -> AndExpr E EqExpr .)
    OU              reduce using rule 44 (AndExpr -> AndExpr E EqExpr .)
    ;               reduce using rule 44 (AndExpr -> AndExpr E EqExpr .)
    )               reduce using rule 44 (AndExpr -> AndExpr E EqExpr .)
    :               reduce using rule 44 (AndExpr -> AndExpr E EqExpr .)
    ]               reduce using rule 44 (AndExpr -> AndExpr E EqExpr .)
    ,               reduce using rule 44 (AndExpr -> AndExpr E EqExpr .)
    EQUAL           shift and go to state 83
    DIFF            shift and go to state 84


state 120

    (46) EqExpr -> EqExpr EQUAL DesigExpr .
    (49) DesigExpr -> DesigExpr . < AddExpr
    (50) DesigExpr -> DesigExpr . > AddExpr
    (52) DesigExpr -> DesigExpr . GEQ AddExpr
    (53) DesigExpr -> DesigExpr . LEQ AddExpr

    EQUAL           reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    DIFF            reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    E               reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    ?               reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    OU              reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    ;               reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    )               reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    :               reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    ]               reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    ,               reduce using rule 46 (EqExpr -> EqExpr EQUAL DesigExpr .)
    <               shift and go to state 85
    >               shift and go to state 86
    GEQ             shift and go to state 87
    LEQ             shift and go to state 88


state 121

    (48) EqExpr -> EqExpr DIFF DesigExpr .
    (49) DesigExpr -> DesigExpr . < AddExpr
    (50) DesigExpr -> DesigExpr . > AddExpr
    (52) DesigExpr -> DesigExpr . GEQ AddExpr
    (53) DesigExpr -> DesigExpr . LEQ AddExpr

    EQUAL           reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    DIFF            reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    E               reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    ?               reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    OU              reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    ;               reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    )               reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    :               reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    ]               reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    ,               reduce using rule 48 (EqExpr -> EqExpr DIFF DesigExpr .)
    <               shift and go to state 85
    >               shift and go to state 86
    GEQ             shift and go to state 87
    LEQ             shift and go to state 88


state 122

    (49) DesigExpr -> DesigExpr < AddExpr .
    (54) AddExpr -> AddExpr . + MulExpr
    (55) AddExpr -> AddExpr . - MulExpr

    <               reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    >               reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    GEQ             reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    LEQ             reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    EQUAL           reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    DIFF            reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    E               reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    ?               reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    OU              reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    ;               reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    )               reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    :               reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    ]               reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    ,               reduce using rule 49 (DesigExpr -> DesigExpr < AddExpr .)
    +               shift and go to state 89
    -               shift and go to state 90


state 123

    (50) DesigExpr -> DesigExpr > AddExpr .
    (54) AddExpr -> AddExpr . + MulExpr
    (55) AddExpr -> AddExpr . - MulExpr

    <               reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    >               reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    GEQ             reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    LEQ             reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    EQUAL           reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    DIFF            reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    E               reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    ?               reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    OU              reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    ;               reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    )               reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    :               reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    ]               reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    ,               reduce using rule 50 (DesigExpr -> DesigExpr > AddExpr .)
    +               shift and go to state 89
    -               shift and go to state 90


state 124

    (52) DesigExpr -> DesigExpr GEQ AddExpr .
    (54) AddExpr -> AddExpr . + MulExpr
    (55) AddExpr -> AddExpr . - MulExpr

    <               reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    >               reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    GEQ             reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    LEQ             reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    EQUAL           reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    DIFF            reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    E               reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    ?               reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    OU              reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    ;               reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    )               reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    :               reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    ]               reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    ,               reduce using rule 52 (DesigExpr -> DesigExpr GEQ AddExpr .)
    +               shift and go to state 89
    -               shift and go to state 90


state 125

    (53) DesigExpr -> DesigExpr LEQ AddExpr .
    (54) AddExpr -> AddExpr . + MulExpr
    (55) AddExpr -> AddExpr . - MulExpr

    <               reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    >               reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    GEQ             reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    LEQ             reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    EQUAL           reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    DIFF            reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    E               reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    ?               reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    OU              reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    ;               reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    )               reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    :               reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    ]               reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    ,               reduce using rule 53 (DesigExpr -> DesigExpr LEQ AddExpr .)
    +               shift and go to state 89
    -               shift and go to state 90


state 126

    (54) AddExpr -> AddExpr + MulExpr .
    (57) MulExpr -> MulExpr . * UnExpr
    (58) MulExpr -> MulExpr . / UnExpr
    (59) MulExpr -> MulExpr . % UnExpr

    +               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    -               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    <               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    >               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    GEQ             reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    LEQ             reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    EQUAL           reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    DIFF            reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    E               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    ?               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    OU              reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    ;               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    )               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    :               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    ]               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    ,               reduce using rule 54 (AddExpr -> AddExpr + MulExpr .)
    *               shift and go to state 91
    /               shift and go to state 92
    %               shift and go to state 93


state 127

    (55) AddExpr -> AddExpr - MulExpr .
    (57) MulExpr -> MulExpr . * UnExpr
    (58) MulExpr -> MulExpr . / UnExpr
    (59) MulExpr -> MulExpr . % UnExpr

    +               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    -               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    <               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    >               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    GEQ             reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    LEQ             reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    EQUAL           reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    DIFF            reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    E               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    ?               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    OU              reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    ;               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    )               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    :               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    ]               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    ,               reduce using rule 55 (AddExpr -> AddExpr - MulExpr .)
    *               shift and go to state 91
    /               shift and go to state 92
    %               shift and go to state 93


state 128

    (57) MulExpr -> MulExpr * UnExpr .

    *               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    /               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    %               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    +               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    -               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    <               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    >               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    GEQ             reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    LEQ             reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    EQUAL           reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    DIFF            reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    E               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    ?               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    OU              reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    ;               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    )               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    :               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    ]               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)
    ,               reduce using rule 57 (MulExpr -> MulExpr * UnExpr .)


state 129

    (58) MulExpr -> MulExpr / UnExpr .

    *               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    /               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    %               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    +               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    -               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    <               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    >               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    GEQ             reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    LEQ             reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    EQUAL           reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    DIFF            reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    E               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    ?               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    OU              reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    ;               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    )               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    :               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    ]               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)
    ,               reduce using rule 58 (MulExpr -> MulExpr / UnExpr .)


state 130

    (59) MulExpr -> MulExpr % UnExpr .

    *               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    /               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    %               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    +               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    -               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    <               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    >               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    GEQ             reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    LEQ             reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    EQUAL           reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    DIFF            reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    E               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    ?               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    OU              reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    ;               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    )               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    :               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    ]               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)
    ,               reduce using rule 59 (MulExpr -> MulExpr % UnExpr .)


state 131

    (68) PrimExpr -> ID [ . Expr ]
    (37) Expr -> . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 145
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 132

    (20) ListaDeclVar -> Tipo ID DeclVar ; . ListaDeclVar
    (19) ListaDeclVar -> . empty
    (20) ListaDeclVar -> . Tipo ID DeclVar ; ListaDeclVar
    (21) ListaDeclVar -> . Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar
    (75) empty -> .
    (22) Tipo -> . INT
    (23) Tipo -> . CAR

    }               reduce using rule 75 (empty -> .)
    ;               reduce using rule 75 (empty -> .)
    RETORNE         reduce using rule 75 (empty -> .)
    LEIA            reduce using rule 75 (empty -> .)
    ESCREVA         reduce using rule 75 (empty -> .)
    NOVALINHA       reduce using rule 75 (empty -> .)
    SE              reduce using rule 75 (empty -> .)
    ENQUANTO        reduce using rule 75 (empty -> .)
    {               reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    -               reduce using rule 75 (empty -> .)
    !               reduce using rule 75 (empty -> .)
    (               reduce using rule 75 (empty -> .)
    CARCONST        reduce using rule 75 (empty -> .)
    INTCONST        reduce using rule 75 (empty -> .)
    INT             shift and go to state 5
    CAR             shift and go to state 6

    Tipo                           shift and go to state 20
    ListaDeclVar                   shift and go to state 146
    empty                          shift and go to state 19

state 133

    (21) ListaDeclVar -> Tipo ID [ INTCONST . ] DeclVar ; ListaDeclVar

    ]               shift and go to state 147


state 134

    (3) DeclFuncVar -> Tipo ID [ INTCONST ] DeclVar ; . DeclFuncVar
    (2) DeclFuncVar -> . Tipo ID DeclVar ; DeclFuncVar
    (3) DeclFuncVar -> . Tipo ID [ INTCONST ] DeclVar ; DeclFuncVar
    (4) DeclFuncVar -> . Tipo ID DeclFunc DeclFuncVar
    (5) DeclFuncVar -> . empty
    (22) Tipo -> . INT
    (23) Tipo -> . CAR
    (75) empty -> .

    INT             shift and go to state 5
    CAR             shift and go to state 6
    PROGRAMA        reduce using rule 75 (empty -> .)

    Tipo                           shift and go to state 3
    DeclFuncVar                    shift and go to state 148
    empty                          shift and go to state 4

state 135

    (7) DeclVar -> , ID [ INTCONST ] . DeclVar
    (6) DeclVar -> . , ID DeclVar
    (7) DeclVar -> . , ID [ INTCONST ] DeclVar
    (8) DeclVar -> . empty
    (75) empty -> .

    ,               shift and go to state 15
    ;               reduce using rule 75 (empty -> .)

    DeclVar                        shift and go to state 149
    empty                          shift and go to state 16

state 136

    (14) ListaParametrosCont -> Tipo ID [ ] .
    (16) ListaParametrosCont -> Tipo ID [ ] . , ListaParametrosCont

    )               reduce using rule 14 (ListaParametrosCont -> Tipo ID [ ] .)
    ,               shift and go to state 150


state 137

    (15) ListaParametrosCont -> Tipo ID , ListaParametrosCont .

    )               reduce using rule 15 (ListaParametrosCont -> Tipo ID , ListaParametrosCont .)


state 138

    (64) LValueExpr -> ID [ Expr . ]

    ]               shift and go to state 151


state 139

    (32) Comando -> SE ( Expr ) . ENTAO Comando
    (33) Comando -> SE ( Expr ) . ENTAO Comando SENAO Comando

    ENTAO           shift and go to state 152


state 140

    (35) Comando -> ENQUANTO ( Expr ) . EXECUTE Comando

    EXECUTE         shift and go to state 153


state 141

    (41) CondExpr -> OrExpr ? Expr : . CondExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    -               shift and go to state 52
    !               shift and go to state 55
    ID              shift and go to state 95
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    OrExpr                         shift and go to state 45
    CondExpr                       shift and go to state 154
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 142

    (64) LValueExpr -> ID [ Expr ] .
    (68) PrimExpr -> ID [ Expr ] .

    =               reduce using rule 64 (LValueExpr -> ID [ Expr ] .)
    *               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    /               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    %               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    +               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    -               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    <               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    >               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    GEQ             reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    LEQ             reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    EQUAL           reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    DIFF            reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    E               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    ?               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    OU              reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    ;               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    )               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    :               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    ]               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    ,               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)


state 143

    (67) PrimExpr -> ID ( ListExpr ) .

    *               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    /               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    %               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    +               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    -               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    <               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    >               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    GEQ             reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    LEQ             reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    EQUAL           reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    DIFF            reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    E               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    ?               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    OU              reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    ;               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    )               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    :               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    ]               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)
    ,               reduce using rule 67 (PrimExpr -> ID ( ListExpr ) .)


state 144

    (74) ListExpr -> ListExpr , . AssignExpr
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    AssignExpr                     shift and go to state 155
    CondExpr                       shift and go to state 44
    LValueExpr                     shift and go to state 36
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 145

    (68) PrimExpr -> ID [ Expr . ]

    ]               shift and go to state 156


state 146

    (20) ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .

    }               reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    ;               reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    RETORNE         reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    LEIA            reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    ESCREVA         reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    NOVALINHA       reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    SE              reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    ENQUANTO        reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    {               reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    ID              reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    -               reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    !               reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    (               reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    CARCONST        reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)
    INTCONST        reduce using rule 20 (ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar .)


state 147

    (21) ListaDeclVar -> Tipo ID [ INTCONST ] . DeclVar ; ListaDeclVar
    (6) DeclVar -> . , ID DeclVar
    (7) DeclVar -> . , ID [ INTCONST ] DeclVar
    (8) DeclVar -> . empty
    (75) empty -> .

    ,               shift and go to state 15
    ;               reduce using rule 75 (empty -> .)

    DeclVar                        shift and go to state 157
    empty                          shift and go to state 16

state 148

    (3) DeclFuncVar -> Tipo ID [ INTCONST ] DeclVar ; DeclFuncVar .

    PROGRAMA        reduce using rule 3 (DeclFuncVar -> Tipo ID [ INTCONST ] DeclVar ; DeclFuncVar .)


state 149

    (7) DeclVar -> , ID [ INTCONST ] DeclVar .

    ;               reduce using rule 7 (DeclVar -> , ID [ INTCONST ] DeclVar .)


state 150

    (16) ListaParametrosCont -> Tipo ID [ ] , . ListaParametrosCont
    (13) ListaParametrosCont -> . Tipo ID
    (14) ListaParametrosCont -> . Tipo ID [ ]
    (15) ListaParametrosCont -> . Tipo ID , ListaParametrosCont
    (16) ListaParametrosCont -> . Tipo ID [ ] , ListaParametrosCont
    (22) Tipo -> . INT
    (23) Tipo -> . CAR

    INT             shift and go to state 5
    CAR             shift and go to state 6

    Tipo                           shift and go to state 28
    ListaParametrosCont            shift and go to state 158

state 151

    (64) LValueExpr -> ID [ Expr ] .

    ;               reduce using rule 64 (LValueExpr -> ID [ Expr ] .)


state 152

    (32) Comando -> SE ( Expr ) ENTAO . Comando
    (33) Comando -> SE ( Expr ) ENTAO . Comando SENAO Comando
    (26) Comando -> . ;
    (27) Comando -> . RETORNE Expr ;
    (28) Comando -> . LEIA LValueExpr ;
    (29) Comando -> . ESCREVA Expr ;
    (30) Comando -> . ESCREVA STRING ;
    (31) Comando -> . NOVALINHA ;
    (32) Comando -> . SE ( Expr ) ENTAO Comando
    (33) Comando -> . SE ( Expr ) ENTAO Comando SENAO Comando
    (34) Comando -> . Expr ;
    (35) Comando -> . ENQUANTO ( Expr ) EXECUTE Comando
    (36) Comando -> . Bloco
    (37) Expr -> . AssignExpr
    (17) Bloco -> . { ListaDeclVar ListaComando }
    (18) Bloco -> . { ListaDeclVar }
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ;               shift and go to state 32
    RETORNE         shift and go to state 33
    LEIA            shift and go to state 35
    ESCREVA         shift and go to state 37
    NOVALINHA       shift and go to state 38
    SE              shift and go to state 39
    ENQUANTO        shift and go to state 41
    {               shift and go to state 11
    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 34
    Comando                        shift and go to state 159
    LValueExpr                     shift and go to state 36
    Bloco                          shift and go to state 42
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 153

    (35) Comando -> ENQUANTO ( Expr ) EXECUTE . Comando
    (26) Comando -> . ;
    (27) Comando -> . RETORNE Expr ;
    (28) Comando -> . LEIA LValueExpr ;
    (29) Comando -> . ESCREVA Expr ;
    (30) Comando -> . ESCREVA STRING ;
    (31) Comando -> . NOVALINHA ;
    (32) Comando -> . SE ( Expr ) ENTAO Comando
    (33) Comando -> . SE ( Expr ) ENTAO Comando SENAO Comando
    (34) Comando -> . Expr ;
    (35) Comando -> . ENQUANTO ( Expr ) EXECUTE Comando
    (36) Comando -> . Bloco
    (37) Expr -> . AssignExpr
    (17) Bloco -> . { ListaDeclVar ListaComando }
    (18) Bloco -> . { ListaDeclVar }
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ;               shift and go to state 32
    RETORNE         shift and go to state 33
    LEIA            shift and go to state 35
    ESCREVA         shift and go to state 37
    NOVALINHA       shift and go to state 38
    SE              shift and go to state 39
    ENQUANTO        shift and go to state 41
    {               shift and go to state 11
    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 34
    Comando                        shift and go to state 160
    LValueExpr                     shift and go to state 36
    Bloco                          shift and go to state 42
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 154

    (41) CondExpr -> OrExpr ? Expr : CondExpr .

    ;               reduce using rule 41 (CondExpr -> OrExpr ? Expr : CondExpr .)
    )               reduce using rule 41 (CondExpr -> OrExpr ? Expr : CondExpr .)
    :               reduce using rule 41 (CondExpr -> OrExpr ? Expr : CondExpr .)
    ]               reduce using rule 41 (CondExpr -> OrExpr ? Expr : CondExpr .)
    ,               reduce using rule 41 (CondExpr -> OrExpr ? Expr : CondExpr .)


state 155

    (74) ListExpr -> ListExpr , AssignExpr .

    )               reduce using rule 74 (ListExpr -> ListExpr , AssignExpr .)
    ,               reduce using rule 74 (ListExpr -> ListExpr , AssignExpr .)


state 156

    (68) PrimExpr -> ID [ Expr ] .

    *               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    /               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    %               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    +               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    -               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    <               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    >               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    GEQ             reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    LEQ             reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    EQUAL           reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    DIFF            reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    E               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    ?               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    OU              reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    ;               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    )               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    :               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    ]               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)
    ,               reduce using rule 68 (PrimExpr -> ID [ Expr ] .)


state 157

    (21) ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar . ; ListaDeclVar

    ;               shift and go to state 161


state 158

    (16) ListaParametrosCont -> Tipo ID [ ] , ListaParametrosCont .

    )               reduce using rule 16 (ListaParametrosCont -> Tipo ID [ ] , ListaParametrosCont .)


state 159

    (32) Comando -> SE ( Expr ) ENTAO Comando .
    (33) Comando -> SE ( Expr ) ENTAO Comando . SENAO Comando

  ! shift/reduce conflict for SENAO resolved as shift
    ;               reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    RETORNE         reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    LEIA            reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    ESCREVA         reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    NOVALINHA       reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    SE              reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    ENQUANTO        reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    {               reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    ID              reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    -               reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    !               reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    (               reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    CARCONST        reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    INTCONST        reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    }               reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .)
    SENAO           shift and go to state 162

  ! SENAO           [ reduce using rule 32 (Comando -> SE ( Expr ) ENTAO Comando .) ]


state 160

    (35) Comando -> ENQUANTO ( Expr ) EXECUTE Comando .

    ;               reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    RETORNE         reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    LEIA            reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    ESCREVA         reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    NOVALINHA       reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    SE              reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    ENQUANTO        reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    {               reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    ID              reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    -               reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    !               reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    (               reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    CARCONST        reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    INTCONST        reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    }               reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)
    SENAO           reduce using rule 35 (Comando -> ENQUANTO ( Expr ) EXECUTE Comando .)


state 161

    (21) ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; . ListaDeclVar
    (19) ListaDeclVar -> . empty
    (20) ListaDeclVar -> . Tipo ID DeclVar ; ListaDeclVar
    (21) ListaDeclVar -> . Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar
    (75) empty -> .
    (22) Tipo -> . INT
    (23) Tipo -> . CAR

    }               reduce using rule 75 (empty -> .)
    ;               reduce using rule 75 (empty -> .)
    RETORNE         reduce using rule 75 (empty -> .)
    LEIA            reduce using rule 75 (empty -> .)
    ESCREVA         reduce using rule 75 (empty -> .)
    NOVALINHA       reduce using rule 75 (empty -> .)
    SE              reduce using rule 75 (empty -> .)
    ENQUANTO        reduce using rule 75 (empty -> .)
    {               reduce using rule 75 (empty -> .)
    ID              reduce using rule 75 (empty -> .)
    -               reduce using rule 75 (empty -> .)
    !               reduce using rule 75 (empty -> .)
    (               reduce using rule 75 (empty -> .)
    CARCONST        reduce using rule 75 (empty -> .)
    INTCONST        reduce using rule 75 (empty -> .)
    INT             shift and go to state 5
    CAR             shift and go to state 6

    Tipo                           shift and go to state 20
    ListaDeclVar                   shift and go to state 163
    empty                          shift and go to state 19

state 162

    (33) Comando -> SE ( Expr ) ENTAO Comando SENAO . Comando
    (26) Comando -> . ;
    (27) Comando -> . RETORNE Expr ;
    (28) Comando -> . LEIA LValueExpr ;
    (29) Comando -> . ESCREVA Expr ;
    (30) Comando -> . ESCREVA STRING ;
    (31) Comando -> . NOVALINHA ;
    (32) Comando -> . SE ( Expr ) ENTAO Comando
    (33) Comando -> . SE ( Expr ) ENTAO Comando SENAO Comando
    (34) Comando -> . Expr ;
    (35) Comando -> . ENQUANTO ( Expr ) EXECUTE Comando
    (36) Comando -> . Bloco
    (37) Expr -> . AssignExpr
    (17) Bloco -> . { ListaDeclVar ListaComando }
    (18) Bloco -> . { ListaDeclVar }
    (38) AssignExpr -> . CondExpr
    (39) AssignExpr -> . LValueExpr = AssignExpr
    (40) CondExpr -> . OrExpr
    (41) CondExpr -> . OrExpr ? Expr : CondExpr
    (64) LValueExpr -> . ID [ Expr ]
    (65) LValueExpr -> . ID
    (42) OrExpr -> . OrExpr OU AndExpr
    (43) OrExpr -> . AndExpr
    (44) AndExpr -> . AndExpr E EqExpr
    (45) AndExpr -> . EqExpr
    (46) EqExpr -> . EqExpr EQUAL DesigExpr
    (47) EqExpr -> . DesigExpr
    (48) EqExpr -> . EqExpr DIFF DesigExpr
    (49) DesigExpr -> . DesigExpr < AddExpr
    (50) DesigExpr -> . DesigExpr > AddExpr
    (51) DesigExpr -> . AddExpr
    (52) DesigExpr -> . DesigExpr GEQ AddExpr
    (53) DesigExpr -> . DesigExpr LEQ AddExpr
    (54) AddExpr -> . AddExpr + MulExpr
    (55) AddExpr -> . AddExpr - MulExpr
    (56) AddExpr -> . MulExpr
    (57) MulExpr -> . MulExpr * UnExpr
    (58) MulExpr -> . MulExpr / UnExpr
    (59) MulExpr -> . MulExpr % UnExpr
    (60) MulExpr -> . UnExpr
    (61) UnExpr -> . - PrimExpr
    (62) UnExpr -> . ! PrimExpr
    (63) UnExpr -> . PrimExpr
    (66) PrimExpr -> . ID ( )
    (67) PrimExpr -> . ID ( ListExpr )
    (68) PrimExpr -> . ID [ Expr ]
    (69) PrimExpr -> . ( Expr )
    (70) PrimExpr -> . CARCONST
    (71) PrimExpr -> . INTCONST
    (72) PrimExpr -> . ID

    ;               shift and go to state 32
    RETORNE         shift and go to state 33
    LEIA            shift and go to state 35
    ESCREVA         shift and go to state 37
    NOVALINHA       shift and go to state 38
    SE              shift and go to state 39
    ENQUANTO        shift and go to state 41
    {               shift and go to state 11
    ID              shift and go to state 46
    -               shift and go to state 52
    !               shift and go to state 55
    (               shift and go to state 40
    CARCONST        shift and go to state 56
    INTCONST        shift and go to state 57

    Expr                           shift and go to state 34
    Comando                        shift and go to state 164
    LValueExpr                     shift and go to state 36
    Bloco                          shift and go to state 42
    AssignExpr                     shift and go to state 43
    CondExpr                       shift and go to state 44
    OrExpr                         shift and go to state 45
    AndExpr                        shift and go to state 47
    EqExpr                         shift and go to state 48
    DesigExpr                      shift and go to state 49
    AddExpr                        shift and go to state 50
    MulExpr                        shift and go to state 51
    UnExpr                         shift and go to state 53
    PrimExpr                       shift and go to state 54

state 163

    (21) ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .

    }               reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    ;               reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    RETORNE         reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    LEIA            reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    ESCREVA         reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    NOVALINHA       reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    SE              reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    ENQUANTO        reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    {               reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    ID              reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    -               reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    !               reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    (               reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    CARCONST        reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)
    INTCONST        reduce using rule 21 (ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar .)


state 164

    (33) Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .

    ;               reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    RETORNE         reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    LEIA            reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    ESCREVA         reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    NOVALINHA       reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    SE              reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    ENQUANTO        reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    {               reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    ID              reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    -               reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    !               reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    (               reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    CARCONST        reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    INTCONST        reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    }               reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)
    SENAO           reduce using rule 33 (Comando -> SE ( Expr ) ENTAO Comando SENAO Comando .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SENAO in state 159 resolved as shift
