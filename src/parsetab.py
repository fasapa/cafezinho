
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "ProgramaCAR CARCONST DIFF E ENQUANTO ENTAO EQUAL ESCREVA EXECUTE GEQ ID INT INTCONST LEIA LEQ NOVALINHA OU PROGRAMA RETORNE SE SENAO STRINGPrograma : DeclFuncVar DeclProgDeclFuncVar : Tipo ID DeclVar ';' DeclFuncVar\n                   | Tipo ID '[' INTCONST ']' DeclVar ';' DeclFuncVar\n                   | Tipo ID DeclFunc DeclFuncVar\n                   | emptyDeclVar : ',' ID DeclVar\n               | ',' ID '[' INTCONST ']' DeclVar\n               | emptyDeclProg : PROGRAMA BlocoDeclFunc : '(' ListaParametros ')' BlocoListaParametros : emptyListaParametros : ListaParametrosContListaParametrosCont : Tipo ID\n                           | Tipo ID '[' ']'\n                           | Tipo ID ',' ListaParametrosCont\n                           | Tipo ID '[' ']' ',' ListaParametrosContBloco : '{' ListaDeclVar ListaComando '}'\n             | '{' ListaDeclVar '}'ListaDeclVar : empty\n                    | Tipo ID DeclVar ';' ListaDeclVar\n                    | Tipo ID '[' INTCONST ']' DeclVar ';' ListaDeclVarTipo : INT\n            | CARListaComando : Comando\n                    | Comando ListaComandoComando : ';'Comando : RETORNE Expr ';'Comando : LEIA LValueExpr ';'Comando : ESCREVA Expr ';'Comando : ESCREVA STRING ';'Comando : NOVALINHA ';'Comando : SE '(' Expr ')' ENTAO Comando\n               | SE '(' Expr ')' ENTAO Comando SENAO ComandoComando : Expr ';'\n               | ENQUANTO '(' Expr ')' EXECUTE Comando\n               | BlocoExpr : AssignExprAssignExpr : CondExpr\n                  | LValueExpr '=' AssignExprCondExpr : OrExpr\n                | OrExpr '?' Expr ':' CondExprOrExpr : OrExpr OU AndExpr\n              | AndExprAndExpr : AndExpr E EqExpr\n               | EqExprEqExpr : EqExpr EQUAL DesigExpr\n              | DesigExprEqExpr : EqExpr DIFF DesigExprDesigExpr : DesigExpr '<' AddExpr\n                 | DesigExpr '>' AddExpr\n                 | AddExprDesigExpr : DesigExpr GEQ AddExprDesigExpr : DesigExpr LEQ AddExprAddExpr : AddExpr '+' MulExpr\n               | AddExpr '-' MulExpr\n               | MulExprMulExpr : MulExpr '*' UnExpr\n               | MulExpr '/' UnExpr\n               | MulExpr '%' UnExpr\n               | UnExprUnExpr : '-' PrimExpr\n              | '!' PrimExpr\n              | PrimExprLValueExpr : ID '[' Expr ']'\n                  | IDPrimExpr : ID '(' ')'\n                | ID '(' ListExpr ')'\n                | ID '[' Expr ']'\n                | '(' Expr ')'PrimExpr : CARCONSTPrimExpr : INTCONSTPrimExpr : IDListExpr : AssignExpr\n                | ListExpr ',' AssignExprempty : "
    
_lr_action_items = {'INT':([0,11,14,17,21,30,65,101,103,132,134,150,161,],[5,5,5,5,5,-18,-17,-10,5,5,5,5,5,]),'CAR':([0,11,14,17,21,30,65,101,103,132,134,150,161,],[6,6,6,6,6,-18,-17,-10,6,6,6,6,6,]),'PROGRAMA':([0,2,4,14,21,23,30,59,65,101,134,148,],[-75,8,-5,-75,-75,-4,-18,-2,-17,-10,-75,-3,]),'$end':([1,7,10,30,65,],[0,-1,-9,-18,-17,]),'ID':([3,5,6,11,15,18,19,20,28,30,31,32,33,35,37,40,42,52,55,65,68,71,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,105,106,108,109,131,132,141,144,146,152,153,159,160,161,162,163,164,],[9,-22,-23,-75,24,46,-19,58,64,-18,46,-26,46,70,46,46,-36,95,95,-17,-34,46,-31,46,46,46,95,46,46,95,95,95,95,95,95,95,95,95,95,95,95,-27,-28,46,-29,-30,46,-75,95,46,-20,46,46,-32,-35,-75,46,-21,-33,]),'{':([8,11,18,19,30,31,32,42,63,65,68,74,104,105,108,109,132,146,152,153,159,160,161,162,163,164,],[11,-75,11,-19,-18,11,-26,-36,11,-17,-34,-31,-27,-28,-29,-30,-75,-20,11,11,-32,-35,-75,11,-21,-33,]),'[':([9,24,46,58,64,70,95,],[13,62,80,98,102,106,131,]),',':([9,24,44,45,46,47,48,49,50,51,53,54,56,57,58,60,64,94,95,96,107,111,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,135,136,142,143,147,154,155,156,],[15,15,-38,-40,-72,-43,-45,-47,-51,-56,-60,-63,-70,-71,15,15,103,-61,-72,-62,-39,-69,-42,-66,144,-73,-44,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,15,150,-68,-67,15,-41,-74,-68,]),'(':([9,11,18,19,30,31,32,33,37,39,40,41,42,46,52,55,65,68,71,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,95,104,105,106,108,109,131,132,141,144,146,152,153,159,160,161,162,163,164,],[17,-75,40,-19,-18,40,-26,40,40,75,40,77,-36,81,40,40,-17,-34,40,-31,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,81,-27,-28,40,-29,-30,40,-75,40,40,-20,40,40,-32,-35,-75,40,-21,-33,]),';':([9,11,12,16,18,19,24,30,31,32,34,38,42,43,44,45,46,47,48,49,50,51,53,54,56,57,58,60,61,65,67,68,69,70,72,73,74,94,95,96,97,99,104,105,107,108,109,111,114,116,119,120,121,122,123,124,125,126,127,128,129,130,132,135,142,143,146,147,149,151,152,153,154,156,157,159,160,161,162,163,164,],[-75,-75,21,-8,32,-19,-75,-18,32,-26,68,74,-36,-37,-38,-40,-72,-43,-45,-47,-51,-56,-60,-63,-70,-71,-75,-75,-6,-17,104,-34,105,-65,108,109,-31,-61,-72,-62,132,134,-27,-28,-39,-29,-30,-69,-42,-66,-44,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,-75,-75,-68,-67,-20,-75,-7,-64,32,32,-41,-68,161,-32,-35,-75,32,-21,-33,]),'}':([11,18,19,29,30,31,32,42,65,66,68,74,104,105,108,109,132,146,159,160,161,163,164,],[-75,30,-19,65,-18,-24,-26,-36,-17,-25,-34,-31,-27,-28,-29,-30,-75,-20,-32,-35,-75,-21,-33,]),'RETORNE':([11,18,19,30,31,32,42,65,68,74,104,105,108,109,132,146,152,153,159,160,161,162,163,164,],[-75,33,-19,-18,33,-26,-36,-17,-34,-31,-27,-28,-29,-30,-75,-20,33,33,-32,-35,-75,33,-21,-33,]),'LEIA':([11,18,19,30,31,32,42,65,68,74,104,105,108,109,132,146,152,153,159,160,161,162,163,164,],[-75,35,-19,-18,35,-26,-36,-17,-34,-31,-27,-28,-29,-30,-75,-20,35,35,-32,-35,-75,35,-21,-33,]),'ESCREVA':([11,18,19,30,31,32,42,65,68,74,104,105,108,109,132,146,152,153,159,160,161,162,163,164,],[-75,37,-19,-18,37,-26,-36,-17,-34,-31,-27,-28,-29,-30,-75,-20,37,37,-32,-35,-75,37,-21,-33,]),'NOVALINHA':([11,18,19,30,31,32,42,65,68,74,104,105,108,109,132,146,152,153,159,160,161,162,163,164,],[-75,38,-19,-18,38,-26,-36,-17,-34,-31,-27,-28,-29,-30,-75,-20,38,38,-32,-35,-75,38,-21,-33,]),'SE':([11,18,19,30,31,32,42,65,68,74,104,105,108,109,132,146,152,153,159,160,161,162,163,164,],[-75,39,-19,-18,39,-26,-36,-17,-34,-31,-27,-28,-29,-30,-75,-20,39,39,-32,-35,-75,39,-21,-33,]),'ENQUANTO':([11,18,19,30,31,32,42,65,68,74,104,105,108,109,132,146,152,153,159,160,161,162,163,164,],[-75,41,-19,-18,41,-26,-36,-17,-34,-31,-27,-28,-29,-30,-75,-20,41,41,-32,-35,-75,41,-21,-33,]),'-':([11,18,19,30,31,32,33,37,40,42,46,50,51,53,54,56,57,65,68,71,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,104,105,106,108,109,111,116,122,123,124,125,126,127,128,129,130,131,132,141,142,143,144,146,152,153,156,159,160,161,162,163,164,],[-75,52,-19,-18,52,-26,52,52,52,-36,-72,90,-56,-60,-63,-70,-71,-17,-34,52,-31,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-61,-72,-62,-27,-28,52,-29,-30,-69,-66,90,90,90,90,-54,-55,-57,-58,-59,52,-75,52,-68,-67,52,-20,52,52,-68,-32,-35,-75,52,-21,-33,]),'!':([11,18,19,30,31,32,33,37,40,42,65,68,71,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,105,106,108,109,131,132,141,144,146,152,153,159,160,161,162,163,164,],[-75,55,-19,-18,55,-26,55,55,55,-36,-17,-34,55,-31,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-27,-28,55,-29,-30,55,-75,55,55,-20,55,55,-32,-35,-75,55,-21,-33,]),'CARCONST':([11,18,19,30,31,32,33,37,40,42,52,55,65,68,71,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,104,105,106,108,109,131,132,141,144,146,152,153,159,160,161,162,163,164,],[-75,56,-19,-18,56,-26,56,56,56,-36,56,56,-17,-34,56,-31,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-27,-28,56,-29,-30,56,-75,56,56,-20,56,56,-32,-35,-75,56,-21,-33,]),'INTCONST':([11,13,18,19,30,31,32,33,37,40,42,52,55,62,65,68,71,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,98,104,105,106,108,109,131,132,141,144,146,152,153,159,160,161,162,163,164,],[-75,22,57,-19,-18,57,-26,57,57,57,-36,57,57,100,-17,-34,57,-31,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,133,-27,-28,57,-29,-30,57,-75,57,57,-20,57,57,-32,-35,-75,57,-21,-33,]),')':([17,25,26,27,43,44,45,46,47,48,49,50,51,53,54,56,57,64,76,81,94,95,96,107,110,111,112,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,136,137,142,143,154,155,156,158,],[-75,63,-11,-12,-37,-38,-40,-72,-43,-45,-47,-51,-56,-60,-63,-70,-71,-13,111,116,-61,-72,-62,-39,139,-69,140,-42,-66,143,-73,-44,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,-14,-15,-68,-67,-41,-74,-68,-16,]),']':([22,43,44,45,46,47,48,49,50,51,53,54,56,57,94,95,96,100,102,107,111,114,115,116,119,120,121,122,123,124,125,126,127,128,129,130,133,138,142,143,145,154,156,],[60,-37,-38,-40,-72,-43,-45,-47,-51,-56,-60,-63,-70,-71,-61,-72,-62,135,136,-39,-69,-42,142,-66,-44,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,147,151,-68,-67,156,-41,-68,]),'SENAO':([30,32,42,65,68,74,104,105,108,109,159,160,164,],[-18,-26,-36,-17,-34,-31,-27,-28,-29,-30,162,-35,-33,]),'=':([36,46,142,],[71,-65,-64,]),'STRING':([37,],[73,]),':':([43,44,45,46,47,48,49,50,51,53,54,56,57,94,95,96,107,111,113,114,116,119,120,121,122,123,124,125,126,127,128,129,130,142,143,154,156,],[-37,-38,-40,-72,-43,-45,-47,-51,-56,-60,-63,-70,-71,-61,-72,-62,-39,-69,141,-42,-66,-44,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-41,-68,]),'?':([45,46,47,48,49,50,51,53,54,56,57,94,95,96,111,114,116,119,120,121,122,123,124,125,126,127,128,129,130,142,143,156,],[78,-72,-43,-45,-47,-51,-56,-60,-63,-70,-71,-61,-72,-62,-69,-42,-66,-44,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-68,]),'OU':([45,46,47,48,49,50,51,53,54,56,57,94,95,96,111,114,116,119,120,121,122,123,124,125,126,127,128,129,130,142,143,156,],[79,-72,-43,-45,-47,-51,-56,-60,-63,-70,-71,-61,-72,-62,-69,-42,-66,-44,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-68,]),'*':([46,51,53,54,56,57,94,95,96,111,116,126,127,128,129,130,142,143,156,],[-72,91,-60,-63,-70,-71,-61,-72,-62,-69,-66,91,91,-57,-58,-59,-68,-67,-68,]),'/':([46,51,53,54,56,57,94,95,96,111,116,126,127,128,129,130,142,143,156,],[-72,92,-60,-63,-70,-71,-61,-72,-62,-69,-66,92,92,-57,-58,-59,-68,-67,-68,]),'%':([46,51,53,54,56,57,94,95,96,111,116,126,127,128,129,130,142,143,156,],[-72,93,-60,-63,-70,-71,-61,-72,-62,-69,-66,93,93,-57,-58,-59,-68,-67,-68,]),'+':([46,50,51,53,54,56,57,94,95,96,111,116,122,123,124,125,126,127,128,129,130,142,143,156,],[-72,89,-56,-60,-63,-70,-71,-61,-72,-62,-69,-66,89,89,89,89,-54,-55,-57,-58,-59,-68,-67,-68,]),'<':([46,49,50,51,53,54,56,57,94,95,96,111,116,120,121,122,123,124,125,126,127,128,129,130,142,143,156,],[-72,85,-51,-56,-60,-63,-70,-71,-61,-72,-62,-69,-66,85,85,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-68,]),'>':([46,49,50,51,53,54,56,57,94,95,96,111,116,120,121,122,123,124,125,126,127,128,129,130,142,143,156,],[-72,86,-51,-56,-60,-63,-70,-71,-61,-72,-62,-69,-66,86,86,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-68,]),'GEQ':([46,49,50,51,53,54,56,57,94,95,96,111,116,120,121,122,123,124,125,126,127,128,129,130,142,143,156,],[-72,87,-51,-56,-60,-63,-70,-71,-61,-72,-62,-69,-66,87,87,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-68,]),'LEQ':([46,49,50,51,53,54,56,57,94,95,96,111,116,120,121,122,123,124,125,126,127,128,129,130,142,143,156,],[-72,88,-51,-56,-60,-63,-70,-71,-61,-72,-62,-69,-66,88,88,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-68,]),'EQUAL':([46,48,49,50,51,53,54,56,57,94,95,96,111,116,119,120,121,122,123,124,125,126,127,128,129,130,142,143,156,],[-72,83,-47,-51,-56,-60,-63,-70,-71,-61,-72,-62,-69,-66,83,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-68,]),'DIFF':([46,48,49,50,51,53,54,56,57,94,95,96,111,116,119,120,121,122,123,124,125,126,127,128,129,130,142,143,156,],[-72,84,-47,-51,-56,-60,-63,-70,-71,-61,-72,-62,-69,-66,84,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-68,]),'E':([46,47,48,49,50,51,53,54,56,57,94,95,96,111,114,116,119,120,121,122,123,124,125,126,127,128,129,130,142,143,156,],[-72,82,-45,-47,-51,-56,-60,-63,-70,-71,-61,-72,-62,-69,82,-66,-44,-46,-48,-49,-50,-52,-53,-54,-55,-57,-58,-59,-68,-67,-68,]),'ENTAO':([139,],[152,]),'EXECUTE':([140,],[153,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Programa':([0,],[1,]),'DeclFuncVar':([0,14,21,134,],[2,23,59,148,]),'Tipo':([0,11,14,17,21,103,132,134,150,161,],[3,20,3,28,3,28,20,3,28,20,]),'empty':([0,9,11,14,17,21,24,58,60,132,134,135,147,161,],[4,16,19,4,26,4,16,16,16,19,4,16,16,19,]),'DeclProg':([2,],[7,]),'Bloco':([8,18,31,63,152,153,162,],[10,42,42,101,42,42,42,]),'DeclVar':([9,24,58,60,135,147,],[12,61,97,99,149,157,]),'DeclFunc':([9,],[14,]),'ListaDeclVar':([11,132,161,],[18,146,163,]),'ListaParametros':([17,],[25,]),'ListaParametrosCont':([17,103,150,],[27,137,158,]),'ListaComando':([18,31,],[29,66,]),'Comando':([18,31,152,153,162,],[31,31,159,160,164,]),'Expr':([18,31,33,37,40,75,77,78,80,106,131,152,153,162,],[34,34,67,72,76,110,112,113,115,138,145,34,34,34,]),'LValueExpr':([18,31,33,35,37,40,71,75,77,78,80,81,106,131,144,152,153,162,],[36,36,36,69,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'AssignExpr':([18,31,33,37,40,71,75,77,78,80,81,106,131,144,152,153,162,],[43,43,43,43,43,107,43,43,43,43,118,43,43,155,43,43,43,]),'CondExpr':([18,31,33,37,40,71,75,77,78,80,81,106,131,141,144,152,153,162,],[44,44,44,44,44,44,44,44,44,44,44,44,44,154,44,44,44,44,]),'OrExpr':([18,31,33,37,40,71,75,77,78,80,81,106,131,141,144,152,153,162,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'AndExpr':([18,31,33,37,40,71,75,77,78,79,80,81,106,131,141,144,152,153,162,],[47,47,47,47,47,47,47,47,47,114,47,47,47,47,47,47,47,47,47,]),'EqExpr':([18,31,33,37,40,71,75,77,78,79,80,81,82,106,131,141,144,152,153,162,],[48,48,48,48,48,48,48,48,48,48,48,48,119,48,48,48,48,48,48,48,]),'DesigExpr':([18,31,33,37,40,71,75,77,78,79,80,81,82,83,84,106,131,141,144,152,153,162,],[49,49,49,49,49,49,49,49,49,49,49,49,49,120,121,49,49,49,49,49,49,49,]),'AddExpr':([18,31,33,37,40,71,75,77,78,79,80,81,82,83,84,85,86,87,88,106,131,141,144,152,153,162,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,122,123,124,125,50,50,50,50,50,50,50,]),'MulExpr':([18,31,33,37,40,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,106,131,141,144,152,153,162,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,126,127,51,51,51,51,51,51,51,]),'UnExpr':([18,31,33,37,40,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,106,131,141,144,152,153,162,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,128,129,130,53,53,53,53,53,53,53,]),'PrimExpr':([18,31,33,37,40,52,55,71,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,106,131,141,144,152,153,162,],[54,54,54,54,54,94,96,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'ListExpr':([81,],[117,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Programa","S'",1,None,None,None),
  ('Programa -> DeclFuncVar DeclProg','Programa',2,'p_Programa','parser.py',20),
  ('DeclFuncVar -> Tipo ID DeclVar ; DeclFuncVar','DeclFuncVar',5,'p_DeclFuncVar','parser.py',28),
  ('DeclFuncVar -> Tipo ID [ INTCONST ] DeclVar ; DeclFuncVar','DeclFuncVar',8,'p_DeclFuncVar','parser.py',29),
  ('DeclFuncVar -> Tipo ID DeclFunc DeclFuncVar','DeclFuncVar',4,'p_DeclFuncVar','parser.py',30),
  ('DeclFuncVar -> empty','DeclFuncVar',1,'p_DeclFuncVar','parser.py',31),
  ('DeclVar -> , ID DeclVar','DeclVar',3,'p_DeclVar','parser.py',61),
  ('DeclVar -> , ID [ INTCONST ] DeclVar','DeclVar',6,'p_DeclVar','parser.py',62),
  ('DeclVar -> empty','DeclVar',1,'p_DeclVar','parser.py',63),
  ('DeclProg -> PROGRAMA Bloco','DeclProg',2,'p_DeclProg','parser.py',87),
  ('DeclFunc -> ( ListaParametros ) Bloco','DeclFunc',4,'p_DeclFunc','parser.py',92),
  ('ListaParametros -> empty','ListaParametros',1,'p_ListaParametrosEmpty','parser.py',96),
  ('ListaParametros -> ListaParametrosCont','ListaParametros',1,'p_ListaParametros','parser.py',100),
  ('ListaParametrosCont -> Tipo ID','ListaParametrosCont',2,'p_ListaParametrosCont','parser.py',104),
  ('ListaParametrosCont -> Tipo ID [ ]','ListaParametrosCont',4,'p_ListaParametrosCont','parser.py',105),
  ('ListaParametrosCont -> Tipo ID , ListaParametrosCont','ListaParametrosCont',4,'p_ListaParametrosCont','parser.py',106),
  ('ListaParametrosCont -> Tipo ID [ ] , ListaParametrosCont','ListaParametrosCont',6,'p_ListaParametrosCont','parser.py',107),
  ('Bloco -> { ListaDeclVar ListaComando }','Bloco',4,'p_Bloco','parser.py',130),
  ('Bloco -> { ListaDeclVar }','Bloco',3,'p_Bloco','parser.py',131),
  ('ListaDeclVar -> empty','ListaDeclVar',1,'p_ListaDeclVar','parser.py',141),
  ('ListaDeclVar -> Tipo ID DeclVar ; ListaDeclVar','ListaDeclVar',5,'p_ListaDeclVar','parser.py',142),
  ('ListaDeclVar -> Tipo ID [ INTCONST ] DeclVar ; ListaDeclVar','ListaDeclVar',8,'p_ListaDeclVar','parser.py',143),
  ('Tipo -> INT','Tipo',1,'p_Tipo','parser.py',160),
  ('Tipo -> CAR','Tipo',1,'p_Tipo','parser.py',161),
  ('ListaComando -> Comando','ListaComando',1,'p_ListaComando','parser.py',171),
  ('ListaComando -> Comando ListaComando','ListaComando',2,'p_ListaComando','parser.py',172),
  ('Comando -> ;','Comando',1,'p_ComandoVazio','parser.py',184),
  ('Comando -> RETORNE Expr ;','Comando',3,'p_ComandoRetorne','parser.py',188),
  ('Comando -> LEIA LValueExpr ;','Comando',3,'p_ComandoLeia','parser.py',192),
  ('Comando -> ESCREVA Expr ;','Comando',3,'p_ComandoEscrevaExpr','parser.py',196),
  ('Comando -> ESCREVA STRING ;','Comando',3,'p_ComandoEscrevaString','parser.py',200),
  ('Comando -> NOVALINHA ;','Comando',2,'p_ComandoNovalinha','parser.py',204),
  ('Comando -> SE ( Expr ) ENTAO Comando','Comando',6,'p_ComandoSe','parser.py',208),
  ('Comando -> SE ( Expr ) ENTAO Comando SENAO Comando','Comando',8,'p_ComandoSe','parser.py',209),
  ('Comando -> Expr ;','Comando',2,'p_Commando','parser.py',219),
  ('Comando -> ENQUANTO ( Expr ) EXECUTE Comando','Comando',6,'p_Commando','parser.py',220),
  ('Comando -> Bloco','Comando',1,'p_Commando','parser.py',221),
  ('Expr -> AssignExpr','Expr',1,'p_Expr','parser.py',236),
  ('AssignExpr -> CondExpr','AssignExpr',1,'p_AssignExpr','parser.py',240),
  ('AssignExpr -> LValueExpr = AssignExpr','AssignExpr',3,'p_AssignExpr','parser.py',241),
  ('CondExpr -> OrExpr','CondExpr',1,'p_CondExpr','parser.py',252),
  ('CondExpr -> OrExpr ? Expr : CondExpr','CondExpr',5,'p_CondExpr','parser.py',253),
  ('OrExpr -> OrExpr OU AndExpr','OrExpr',3,'p_OrExpr','parser.py',263),
  ('OrExpr -> AndExpr','OrExpr',1,'p_OrExpr','parser.py',264),
  ('AndExpr -> AndExpr E EqExpr','AndExpr',3,'p_AndExpr','parser.py',274),
  ('AndExpr -> EqExpr','AndExpr',1,'p_AndExpr','parser.py',275),
  ('EqExpr -> EqExpr EQUAL DesigExpr','EqExpr',3,'p_EqExprEQUAL','parser.py',285),
  ('EqExpr -> DesigExpr','EqExpr',1,'p_EqExprEQUAL','parser.py',286),
  ('EqExpr -> EqExpr DIFF DesigExpr','EqExpr',3,'p_EqExprDIFF','parser.py',297),
  ('DesigExpr -> DesigExpr < AddExpr','DesigExpr',3,'p_DesigExpr','parser.py',301),
  ('DesigExpr -> DesigExpr > AddExpr','DesigExpr',3,'p_DesigExpr','parser.py',302),
  ('DesigExpr -> AddExpr','DesigExpr',1,'p_DesigExpr','parser.py',303),
  ('DesigExpr -> DesigExpr GEQ AddExpr','DesigExpr',3,'p_DesigExprGEQ','parser.py',317),
  ('DesigExpr -> DesigExpr LEQ AddExpr','DesigExpr',3,'p_DesigExprLEQ','parser.py',321),
  ('AddExpr -> AddExpr + MulExpr','AddExpr',3,'p_AddExpr','parser.py',325),
  ('AddExpr -> AddExpr - MulExpr','AddExpr',3,'p_AddExpr','parser.py',326),
  ('AddExpr -> MulExpr','AddExpr',1,'p_AddExpr','parser.py',327),
  ('MulExpr -> MulExpr * UnExpr','MulExpr',3,'p_MulExpr','parser.py',341),
  ('MulExpr -> MulExpr / UnExpr','MulExpr',3,'p_MulExpr','parser.py',342),
  ('MulExpr -> MulExpr % UnExpr','MulExpr',3,'p_MulExpr','parser.py',343),
  ('MulExpr -> UnExpr','MulExpr',1,'p_MulExpr','parser.py',344),
  ('UnExpr -> - PrimExpr','UnExpr',2,'p_UnExpr','parser.py',362),
  ('UnExpr -> ! PrimExpr','UnExpr',2,'p_UnExpr','parser.py',363),
  ('UnExpr -> PrimExpr','UnExpr',1,'p_UnExpr','parser.py',364),
  ('LValueExpr -> ID [ Expr ]','LValueExpr',4,'p_LValueExpr','parser.py',378),
  ('LValueExpr -> ID','LValueExpr',1,'p_LValueExpr','parser.py',379),
  ('PrimExpr -> ID ( )','PrimExpr',3,'p_PrimExpr','parser.py',389),
  ('PrimExpr -> ID ( ListExpr )','PrimExpr',4,'p_PrimExpr','parser.py',390),
  ('PrimExpr -> ID [ Expr ]','PrimExpr',4,'p_PrimExpr','parser.py',391),
  ('PrimExpr -> ( Expr )','PrimExpr',3,'p_PrimExpr','parser.py',392),
  ('PrimExpr -> CARCONST','PrimExpr',1,'p_PrimExprCARCONST','parser.py',410),
  ('PrimExpr -> INTCONST','PrimExpr',1,'p_PrimExprINTCONST','parser.py',414),
  ('PrimExpr -> ID','PrimExpr',1,'p_PrimExprID','parser.py',418),
  ('ListExpr -> AssignExpr','ListExpr',1,'p_ListExpr','parser.py',422),
  ('ListExpr -> ListExpr , AssignExpr','ListExpr',3,'p_ListExpr','parser.py',423),
  ('empty -> <empty>','empty',0,'p_Empty','parser.py',433),
]
